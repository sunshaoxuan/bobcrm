@using Microsoft.AspNetCore.Components
@inject NavigationManager Nav
@inject IJSRuntime JS
@inject BobCrm.App.Services.AuthService Auth

<div style="min-height:100vh;display:flex">
    <div style="width:220px;background:#001529;color:#fff">
        <div class="logo" style="height:32px;margin:16px;background:rgba(255,255,255,0.3)"></div>
        <ul style="list-style:none;padding:0 12px">
            <li><a href="/customers" style="color:#fff;text-decoration:none">@I18n.T("MENU_CUSTOMERS")</a></li>
        </ul>
    </div>
    <div style="flex:1;display:flex;flex-direction:column">
        <div style="background:#fff;padding:8px 16px;display:flex;align-items:center;justify-content:space-between;border-bottom:1px solid #eee">
            <div>BobCRM</div>
            <div>
                <select @onchange="OnLangChangedHtml" value="@lang" style="width:160px;height:28px;margin-right:8px">
                    @if (langs.Count == 0)
                    {
                        <option value="zh">中文</option>
                        <option value="ja">日本語</option>
                        <option value="en">English</option>
                    }
                    else
                    {
                        @foreach (var l in langs)
                        {
                            <option value="@l.code">@l.name</option>
                        }
                    }
                </select>
                <Button OnClick="Logout">@I18n.T("BTN_LOGOUT")</Button>
            </div>
        </div>
        <div style="padding:16px">
            <div style="padding:16px;background:#fff;min-height:360px">
                @Body
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public RenderFragment? Body { get; set; }
    private string lang = "ja";
    private List<LangItem> langs = new();

    [Inject] BobCrm.App.Services.I18nService I18n { get; set; } = default!;
    [Inject] IJSRuntime _js { get; set; } = default!;

    private async Task Logout()
    {
        await JS.InvokeVoidAsync("localStorage.removeItem", "accessToken");
        await JS.InvokeVoidAsync("localStorage.removeItem", "refreshToken");
        await JS.InvokeVoidAsync("localStorage.removeItem", "user");
        Nav.NavigateTo("/login", forceLoad: true);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var saved = await _js.InvokeAsync<string?>("bobcrm.getCookie", "lang");
                if (!string.IsNullOrWhiteSpace(saved)) lang = saved!;
                await I18n.LoadAsync(lang);
                try { await JS.InvokeVoidAsync("bobcrm.setLang", lang); } catch { }
                // load languages list
                try
                {
                    var http = await Auth.CreateClientWithLangAsync();
                    var resp = await http.GetAsync("/api/i18n/languages");
                    if (resp.IsSuccessStatusCode)
                    {
                        var json = await resp.Content.ReadFromJsonAsync<List<LangItem>>();
                        if (json is not null && json.Count > 0) langs = json;
                    }
                }
                catch { }
                StateHasChanged();
            }
            catch { }
        }
    }

    private async Task OnLangChangedHtml(ChangeEventArgs e)
    {
        var value = e?.Value?.ToString() ?? "zh";
        lang = value;
        try { await _js.InvokeVoidAsync("bobcrm.setCookie", "lang", lang, 365); } catch { }
        await I18n.LoadAsync(lang);
        try { await JS.InvokeVoidAsync("bobcrm.setLang", lang); } catch { }
        StateHasChanged();
    }

    public class LangItem { public string code { get; set; } = string.Empty; public string name { get; set; } = string.Empty; }
}


