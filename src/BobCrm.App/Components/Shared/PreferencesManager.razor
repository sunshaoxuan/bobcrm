@rendermode RenderMode.InteractiveServer
@using BobCrm.App.Services
@inject PreferencesService PrefsService
@inject IJSRuntime JS
@inject NavigationManager Nav
@implements IDisposable

@code {
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Register .NET callback for JavaScript to call
                await JS.InvokeVoidAsync("bobcrm.registerPreferencesCallback",
                    DotNetObjectReference.Create(this));

                // Load preferences from server/localStorage and apply to cache+UI
                var prefs = await PrefsService.LoadPreferencesAsync();

                // Update localStorage (cache) with loaded preferences
                await JS.InvokeVoidAsync("localStorage.setItem", "theme", prefs.Theme ?? "light");
                var initColor = await JS.InvokeAsync<string>("bobcrm.getInitColor");
                await JS.InvokeVoidAsync("localStorage.setItem", "udfColor", prefs.UdfColor ?? initColor);

                // Render UI from cache
                await JS.InvokeVoidAsync("bobcrm.initTheme");
            }
            catch
            {
                // Ignore initialization errors
            }
        }
    }

    [JSInvokable]
    public async Task SaveThemeAsync(string theme)
    {
        try
        {
            var prefs = new PreferencesService.UserPreferences
            {
                Theme = theme,
                UdfColor = await JS.InvokeAsync<string?>("bobcrm.getPrimary") ?? await JS.InvokeAsync<string>("bobcrm.getInitColor"),
                Language = await JS.InvokeAsync<string?>("bobcrm.getCookie", "lang") ?? "ja"
            };
            await PrefsService.SavePreferencesAsync(prefs);
        }
        catch
        {
            // Ignore save errors
        }
    }

    [JSInvokable]
    public async Task SavePrimaryColorAsync(string color)
    {
        try
        {
            var prefs = new PreferencesService.UserPreferences
            {
                Theme = await JS.InvokeAsync<string?>("bobcrm.getTheme") ?? "light",
                UdfColor = color,
                Language = await JS.InvokeAsync<string?>("bobcrm.getCookie", "lang") ?? "ja"
            };
            await PrefsService.SavePreferencesAsync(prefs);
        }
        catch
        {
            // Ignore save errors
        }
    }

    [JSInvokable]
    public async Task SaveLanguageAsync(string language)
    {
        try
        {
            var prefs = new PreferencesService.UserPreferences
            {
                Theme = await JS.InvokeAsync<string?>("bobcrm.getTheme") ?? "light",
                UdfColor = await JS.InvokeAsync<string?>("bobcrm.getPrimary") ?? await JS.InvokeAsync<string>("bobcrm.getInitColor"),
                Language = language
            };
            await PrefsService.SavePreferencesAsync(prefs);
        }
        catch
        {
            // Ignore save errors
        }
    }

    public void Dispose()
    {
        // No cleanup needed
    }
}
