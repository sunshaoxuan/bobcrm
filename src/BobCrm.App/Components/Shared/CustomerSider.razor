@using Microsoft.AspNetCore.Components
@rendermode RenderMode.InteractiveServer
@inject BobCrm.App.Services.AuthService Auth
@inject NavigationManager Nav
@inject IJSRuntime JS
@inject BobCrm.App.Services.I18nService I18n

<div class="customer-sider">
  <div style="padding:8px">
    <input type="text"
           placeholder='@($"{I18n.T("LBL_SEARCH")}{I18n.T("COL_NAME")}/{I18n.T("COL_CODE")}")'
           @bind="keyword"
           style="width:100%; padding:6px; border:1px solid #d0d0d0; border-radius:4px; background:rgba(255,255,255,0.1); color:#fff; font-size:13px; margin-bottom:8px" />
    <button @onclick="CreateNew" class="btn-new-customer">
      + @I18n.T("BTN_NEW_CUSTOMER")
    </button>
  </div>
  @if (!string.IsNullOrWhiteSpace(error))
  {
    <div style="padding:8px; color:#ff6b6b; font-size:12px">@error</div>
  }
  @if (loading)
  {
    <div style="padding:16px; text-align:center; color:rgba(255,255,255,0.6)">@I18n.T("LBL_LOADING")...</div>
  }
  
  @* Always show the list, even if empty *@
  <ul class="sider-list" style="list-style:none; padding:0; margin:0; max-height:600px; overflow-y:auto">
    @foreach (var c in Filtered())
    {
      var cls = c.id == selectedId ? "sider-item selected" : "sider-item";
      <li class="@cls" @onclick="(() => Go(c.id))" style="padding:10px; cursor:pointer; border-bottom:1px solid rgba(255,255,255,0.1)">
        <div class="code" style="font-weight:600; font-size:13px; color:#fff; margin-bottom:2px">@c.code</div>
        <div class="name" style="font-size:12px; color:rgba(255,255,255,0.7)">@c.name</div>
      </li>
    }
  </ul>
  
  @if (!loading && _data.Count == 0 && string.IsNullOrWhiteSpace(error))
  {
    <div style="padding:16px; text-align:center; color:rgba(255,255,255,0.6)">@I18n.T("LBL_NOT_FOUND")</div>
  }
</div>

@code {
  private List<Item> _data = new();
  private string keyword = string.Empty;
  private string? error;
  private int selectedId;
  private bool loading = true;

  protected override void OnInitialized()
  {
    I18n.OnChanged += HandleI18nChanged;
    Nav.LocationChanged += HandleLocationChanged;
  }
  
  private void HandleI18nChanged() { try { InvokeAsync(StateHasChanged); } catch { } }
  
  private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
  {
    TrySyncSelectedFromUrl();
    InvokeAsync(StateHasChanged);
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (!firstRender) return;
    
    try
    {
      await JS.InvokeVoidAsync("console.log", "[CustomerSider] OnAfterRenderAsync started");
      
      // Load i18n first
      var saved = await JS.InvokeAsync<string?>("bobcrm.getCookie", "lang");
      var langToLoad = !string.IsNullOrWhiteSpace(saved) ? saved! : "ja";
      await I18n.LoadAsync(langToLoad);
      
      await JS.InvokeVoidAsync("console.log", "[CustomerSider] i18n loaded");
      
      // Wait for UI to update
      await InvokeAsync(StateHasChanged);
      
      // Load customers
      await JS.InvokeVoidAsync("console.log", "[CustomerSider] Loading customers...");
      var resp = await Auth.GetWithRefreshAsync("/api/customers");
      await JS.InvokeVoidAsync("console.log", $"[CustomerSider] Response status: {(int)resp.StatusCode}");
      
      if (resp.IsSuccessStatusCode)
      {
        _data = await resp.Content.ReadFromJsonAsync<List<Item>>() ?? new();
        await JS.InvokeVoidAsync("console.log", $"[CustomerSider] Loaded {_data.Count} customers");
        TrySyncSelectedFromUrl();
      }
      else 
      { 
        error = $"Load customers failed: {(int)resp.StatusCode}"; 
        await JS.InvokeVoidAsync("console.error", $"[CustomerSider] Error: {error}");
      }
      
      loading = false;
      StateHasChanged();
      await JS.InvokeVoidAsync("console.log", "[CustomerSider] StateHasChanged called");
    }
    catch (Exception ex)
    {
      error = $"Error: {ex.Message}";
      loading = false;
      await JS.InvokeVoidAsync("console.error", $"[CustomerSider] Exception: {ex.Message}");
      StateHasChanged();
    }
  }

  

  private IEnumerable<Item> Filtered()
  {
    if (string.IsNullOrWhiteSpace(keyword)) return _data;
    return _data.Where(x => (x.name ?? "").Contains(keyword, StringComparison.OrdinalIgnoreCase) || (x.code ?? "").Contains(keyword, StringComparison.OrdinalIgnoreCase));
  }

  private void Go(int id)
  {
    Nav.NavigateTo($"/customer/{id}");
  }

  private void CreateNew()
  {
    Nav.NavigateTo("/customers/new");
  }

  private void TrySyncSelectedFromUrl()
  {
    try
    {
      var uri = new Uri(Nav.Uri);
      var seg = uri.AbsolutePath.Split('/', StringSplitOptions.RemoveEmptyEntries);
      if (seg.Length >= 2 && seg[0] == "customer" && int.TryParse(seg[1], out var id)) selectedId = id;
    }
    catch { }
  }

  public class Item { public int id { get; set; } public string? code { get; set; } public string? name { get; set; } }
}
