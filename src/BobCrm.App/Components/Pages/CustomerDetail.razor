@page "/customer/{Id:int}"
@rendermode RenderMode.InteractiveServer
@implements IDisposable

@inject BobCrm.App.Services.AuthService Auth
@inject NavigationManager Nav
@inject IJSRuntime JS
@inject BobCrm.App.Services.I18nService I18n

<AuthChecker>
@if (loading)
{
    <div class="text-muted">@I18n.T("LBL_LOADING")...</div>
}
else if (error != null)
{
    <Alert Message="@error" Type="AlertType.Error" ShowIcon="true" />
    <div style="margin-top:16px">
        <Button OnClick="GoBack">@I18n.T("BTN_BACK")</Button>
    </div>
}
else if (customer != null)
{
    @if (mode == ViewMode.Design)
    {
        <!-- Design Mode: Full screen designer with toolbox and properties -->
        <div class="designer-container" style="position:fixed; top:0; left:0; right:0; bottom:0; background:#fff; z-index:1000; display:flex; flex-direction:column">
            <!-- Designer Header -->
            <div style="display:flex; justify-content:space-between; align-items:center; padding:12px 20px; border-bottom:1px solid var(--border); background:var(--card-bg)">
                <div style="display:flex; align-items:center; gap:16px">
                    <h2 style="margin:0; font-size:18px">@I18n.T("MODE_DESIGN") - @customer.name</h2>
                    <Tag Color="blue">@customer.code</Tag>
                </div>
                <div style="display:flex; gap:8px">
                    <Button Type="@ButtonType.Primary" OnClick="SaveLayout" Icon="@IconType.Outline.Save">@I18n.T("BTN_SAVE_LAYOUT")</Button>
                    <Button OnClick="@(() => SwitchMode(ViewMode.Browse))" Icon="@IconType.Outline.Close">@I18n.T("BTN_EXIT_DESIGN")</Button>
                </div>
            </div>

            <!-- Designer Main Area -->
            <div style="display:flex; flex:1; overflow:hidden">
                <!-- Left Toolbox -->
                <div class="designer-toolbox" style="width:240px; border-right:1px solid var(--border); overflow-y:auto; background:#fafafa">
                    <div style="padding:16px">
                        <h3 style="margin:0 0 12px 0; font-size:14px; font-weight:600">@I18n.T("LBL_COMPONENTS")</h3>
                        <Collapse Accordion="false" DefaultActiveKey="@(new[]{"1","2"})">
                            <Panel Header="@I18n.T("LBL_BASIC_COMPONENTS")" Key="1">
                                <div style="display:flex; flex-direction:column; gap:8px">
                                    @foreach (var comp in basicComponents)
                                    {
                                        <div class="component-item" draggable="true" data-drag-type="component" data-drag-data="@comp.Type" @ondragstart="@((e) => OnDragStart(e, comp))" @ondragstart:preventDefault="false" @ondragend="OnDragEnd"
                                             style="padding:8px 12px; background:#fff; border:1px solid #d9d9d9; border-radius:4px; cursor:move; display:flex; align-items:center; gap:8px">
                                            <Icon Type="@comp.Icon" />
                                            <span style="font-size:13px">@I18n.T(comp.Label)</span>
                                        </div>
                                    }
                                </div>
                            </Panel>
                            <Panel Header="@I18n.T("LBL_LAYOUT_COMPONENTS")" Key="2">
                                <div style="display:flex; flex-direction:column; gap:8px">
                                    @foreach (var comp in layoutComponents)
                                    {
                                        <div class="component-item" draggable="true" data-drag-type="component" data-drag-data="@comp.Type" @ondragstart="@((e) => OnDragStart(e, comp))" @ondragstart:preventDefault="false" @ondragend="OnDragEnd"
                                             style="padding:8px 12px; background:#fff; border:1px solid #d9d9d9; border-radius:4px; cursor:move; display:flex; align-items:center; gap:8px">
                                            <Icon Type="@comp.Icon" />
                                            <span style="font-size:13px">@I18n.T(comp.Label)</span>
                                        </div>
                                    }
                                </div>
                            </Panel>
                        </Collapse>
                    </div>
                </div>

                <!-- Center Canvas -->
                <div class="designer-canvas" style="flex:1; overflow:auto; padding:24px; background:#f5f5f5;"
                     @ondrop="OnDrop" @ondrop:preventDefault @ondragover="OnDragOver" @ondragover:preventDefault>
                    <div style="padding:24px; min-height:100%">
                        <div @ref="canvasRef" class="layout-widgets-container" style="display:flex; flex-wrap:wrap; gap:12px; align-content:flex-start; min-height:calc(100vh - 160px); background:#fff; border-radius:8px; padding:16px; position:relative">
                            @foreach (var widget in layoutWidgets)
                            {
                                <div class="layout-widget @(selectedWidget == widget ? "selected" : "")"
                                     draggable="true"
                                     data-drag-type="widget"
                                     data-drag-data="@widget.Id"
                                     data-widget-id="@widget.Id"
                                     @ondragstart="@((e) => OnWidgetDragStart(e, widget))"
                                     @ondragstart:preventDefault="false"
                                     @ondragend="OnDragEnd"
                                     @onclick="@(() => SelectWidget(widget))"
                                     style="@GetFlowWidgetStyle(widget)">

                                    <!-- Resize Handle -->
                                    @if (selectedWidget == widget)
                                    {
                                        <div class="resize-handle"
                                             @onmousedown="@((e) => OnResizeStart(e, widget))"
                                             @onmousedown:stopPropagation
                                             style="position:absolute; right:0; top:0; bottom:0; width:8px; cursor:ew-resize; background:transparent; z-index:10;">
                                            <div style="position:absolute; right:2px; top:50%; transform:translateY(-50%); width:4px; height:24px; background:#1890ff; border-radius:2px"></div>
                                        </div>
                                    }

                                    <!-- Widget Content -->
                                    <div class="widget-content" style="width:100%; pointer-events:none">
                                        @if (widget.Type == "textbox")
                                        {
                                            <div style="padding:8px; border:1px solid #d9d9d9; border-radius:4px; background:#fafafa; width:100%">
                                                <div style="font-size:12px; color:#666; margin-bottom:4px">@widget.Label</div>
                                                <div style="height:32px; background:#fff; border:1px solid #e0e0e0; border-radius:2px"></div>
                                            </div>
                                        }
                                        else if (widget.Type == "label")
                                        {
                                            <div style="padding:8px; font-weight:500">@widget.Label</div>
                                        }
                                        else if (widget.Type == "calendar")
                                        {
                                            <div style="padding:8px; border:1px solid #d9d9d9; border-radius:4px; background:#fafafa; width:100%">
                                                <div style="font-size:12px; color:#666; margin-bottom:4px">@widget.Label</div>
                                                <div style="height:32px; background:#fff; border:1px solid #e0e0e0; border-radius:2px; display:flex; align-items:center; padding:0 8px">
                                                    <Icon Type="@IconType.Outline.Calendar" />
                                                </div>
                                            </div>
                                        }
                                        else if (widget.Type == "listbox")
                                        {
                                            <div style="padding:8px; border:1px solid #d9d9d9; border-radius:4px; background:#fafafa; width:100%">
                                                <div style="font-size:12px; color:#666; margin-bottom:4px">@widget.Label</div>
                                                <div style="height:32px; background:#fff; border:1px solid #e0e0e0; border-radius:2px; display:flex; align-items:center; padding:0 8px">
                                                    <Icon Type="@IconType.Outline.UnorderedList" />
                                                </div>
                                            </div>
                                        }
                                        else if (widget.Type == "tabbox")
                                        {
                                            <div style="border:1px solid #d9d9d9; border-radius:4px; padding:8px; width:100%">
                                                <div style="display:flex; gap:8px; border-bottom:1px solid #e0e0e0; padding-bottom:8px; margin-bottom:8px">
                                                    <div style="padding:4px 12px; background:#1890ff; color:#fff; border-radius:2px; font-size:12px">Tab 1</div>
                                                    <div style="padding:4px 12px; background:#f0f0f0; color:#666; border-radius:2px; font-size:12px">Tab 2</div>
                                                </div>
                                                <div style="padding:8px; color:#999; font-size:12px">@widget.Label</div>
                                            </div>
                                        }
                                        else if (widget.Type == "frame")
                                        {
                                            <div style="border:2px dashed #d9d9d9; border-radius:4px; padding:12px; min-height:80px; background:#fafafa; width:100%">
                                                <div style="color:#999; font-size:12px; display:flex; align-items:center">
                                                    <Icon Type="@IconType.Outline.BorderOuter" Style="margin-right:4px" />
                                                    <span>@widget.Label</span>
                                                </div>
                                            </div>
                                        }
                                        else
                                        {
                                            <div style="padding:8px">@widget.Type</div>
                                        }
                                    </div>
                                </div>
                            }
                            @if (!layoutWidgets.Any())
                            {
                                <div style="width:100%; text-align:center; padding:60px 20px; color:#999; pointer-events:none">
                                    <Icon Type="@IconType.Outline.Inbox" Style="font-size:48px; margin-bottom:12px" />
                                    <div>@I18n.T("LBL_DRAG_COMPONENT_HERE")</div>
                                </div>
                            }
                        </div>
                    </div>
                </div>

                <!-- Right Properties Panel -->
                <div class="designer-properties" style="width:280px; border-left:1px solid var(--border); overflow-y:auto; background:#fafafa">
                    @if (selectedWidget != null)
                    {
                        <div style="padding:16px">
                            <h3 style="margin:0 0 16px 0; font-size:14px; font-weight:600">@I18n.T("LBL_PROPERTIES")</h3>

                            <div style="margin-bottom:16px">
                                <label style="display:block; font-size:12px; color:#666; margin-bottom:4px">@I18n.T("LBL_COMPONENT_TYPE")</label>
                                <Input Value="@selectedWidget.Type" Disabled />
                            </div>

                            <div style="margin-bottom:16px">
                                <label style="display:block; font-size:12px; color:#666; margin-bottom:4px">@I18n.T("LBL_LABEL")</label>
                                <Input @bind-Value="selectedWidget.Label" OnChange="@((string value) => UpdateWidget())" />
                            </div>

                            <div style="margin-bottom:16px">
                                <label style="display:block; font-size:12px; color:#666; margin-bottom:4px">@I18n.T("LBL_WIDTH")</label>
                                <InputGroup Compact>
                                    <AntDesign.InputNumber TValue="int" @bind-Value="selectedWidget.Width" Min="1" Max="100" Style="width:70%" OnChange="@(value => UpdateWidget())" />
                                    <Select TItemValue="string" TItem="string" @bind-Value="selectedWidget.WidthUnit" Style="width:30%" OnSelectedItemChanged="@(item => UpdateWidget())">
                                        <SelectOption Value="@("%")" Label="@("%")" />
                                        <SelectOption Value="@("px")" Label="@("px")" />
                                    </Select>
                                </InputGroup>
                            </div>

                            <div style="margin-bottom:16px">
                                <label style="display:block; font-size:12px; color:#666; margin-bottom:4px">@I18n.T("LBL_HEIGHT")</label>
                                <InputGroup Compact>
                                    <AntDesign.InputNumber TValue="int" @bind-Value="selectedWidget.Height" Min="20" Max="500" Style="width:70%"
                                                          Disabled="@(!selectedWidget.CanEditProperty("Height"))" OnChange="@(value => UpdateWidget())" />
                                    <Select TItemValue="string" TItem="string" @bind-Value="selectedWidget.HeightUnit" Style="width:30%"
                                           Disabled="@(!selectedWidget.CanEditProperty("Height"))" OnSelectedItemChanged="@(item => UpdateWidget())">
                                        <SelectOption Value="@("px")" Label="@("px")" />
                                        <SelectOption Value="@("auto")" Label="@("auto")" />
                                    </Select>
                                </InputGroup>
                            </div>

                            <div style="margin-bottom:16px">
                                <label style="display:block; font-size:12px; color:#666; margin-bottom:4px">@I18n.T("LBL_DATA_SOURCE")</label>
                                <Select TItemValue="string" TItem="string" @bind-Value="selectedWidget.DataField" AllowClear Style="width:100%" OnSelectedItemChanged="@(item => UpdateWidget())">
                                    @if (customer.fields != null)
                                    {
                                        @foreach (var field in customer.fields)
                                        {
                                            <SelectOption Value="@field.key" Label="@field.label" />
                                        }
                                    }
                                </Select>
                            </div>

                            <Divider Style="margin:12px 0" />

                            <div style="margin-bottom:16px">
                                <label style="display:block; font-size:12px; color:#666; margin-bottom:4px">@I18n.T("LBL_DEFAULT_VALUE")</label>
                                <Input @bind-Value="selectedWidget.DefaultValue"
                                      Disabled="@(!selectedWidget.CanEditProperty("DefaultValue"))"
                                      OnChange="@((string value) => UpdateWidget())" />
                            </div>

                            <div style="margin-bottom:16px">
                                <label style="display:block; font-size:12px; color:#666; margin-bottom:4px">@I18n.T("LBL_PLACEHOLDER")</label>
                                <Input @bind-Value="selectedWidget.Placeholder"
                                      Disabled="@(!selectedWidget.CanEditProperty("Placeholder"))"
                                      OnChange="@((string value) => UpdateWidget())" />
                            </div>

                            <div style="margin-bottom:16px">
                                <label style="display:block; font-size:12px; color:#666; margin-bottom:4px">@I18n.T("LBL_MAX_LENGTH")</label>
                                <AntDesign.InputNumber TValue="int?" @bind-Value="selectedWidget.MaxLength" Min="1" Max="10000"
                                                      Disabled="@(!selectedWidget.CanEditProperty("MaxLength"))"
                                                      OnChange="@(value => UpdateWidget())" />
                            </div>

                            <Divider Style="margin:12px 0" />

                            <div style="margin-bottom:16px; display:flex; justify-content:space-between; align-items:center">
                                <label style="font-size:12px; color:#666">@I18n.T("LBL_REQUIRED")</label>
                                <Switch @bind-Value="selectedWidget.Required"
                                       Disabled="@(!selectedWidget.CanEditProperty("Required"))"
                                       OnChange="@(value => UpdateWidget())" />
                            </div>

                            <div style="margin-bottom:16px; display:flex; justify-content:space-between; align-items:center">
                                <label style="font-size:12px; color:#666">@I18n.T("LBL_READONLY")</label>
                                <Switch @bind-Value="selectedWidget.Readonly"
                                       Disabled="@(!selectedWidget.CanEditProperty("Readonly"))"
                                       OnChange="@(value => UpdateWidget())" />
                            </div>

                            <div style="margin-bottom:16px; display:flex; justify-content:space-between; align-items:center">
                                <label style="font-size:12px; color:#666">@I18n.T("LBL_VISIBLE")</label>
                                <Switch @bind-Value="selectedWidget.Visible" OnChange="@(value => UpdateWidget())" />
                            </div>

                            <Divider />

                            <Button Danger Block OnClick="DeleteSelectedWidget" Icon="@IconType.Outline.Delete">@I18n.T("BTN_DELETE")</Button>
                        </div>
                    }
                    else
                    {
                        <div style="padding:16px">
                            <h3 style="margin:0 0 16px 0; font-size:14px; font-weight:600">@I18n.T("LBL_PROPERTIES")</h3>
                            <div style="padding:20px; background:#fff; border:1px solid #d9d9d9; border-radius:4px; margin-bottom:16px">
                                <div style="margin-bottom:12px">
                                    <div style="font-size:12px; color:#999; margin-bottom:4px">@I18n.T("COL_CODE")</div>
                                    <div style="font-weight:500">@customer.code</div>
                                </div>
                                <div style="margin-bottom:12px">
                                    <div style="font-size:12px; color:#999; margin-bottom:4px">@I18n.T("COL_NAME")</div>
                                    <div style="font-weight:500">@customer.name</div>
                                </div>
                                <Divider Style="margin:12px 0" />
                                <div style="margin-bottom:12px">
                                    <div style="font-size:12px; color:#999; margin-bottom:4px">@I18n.T("LBL_COMPONENTS")</div>
                                    <div style="font-weight:500">@layoutWidgets.Count</div>
                                </div>
                                <div>
                                    <div style="font-size:12px; color:#999; margin-bottom:4px">@I18n.T("LBL_VISIBLE")</div>
                                    <div style="font-weight:500">@layoutWidgets.Count(w => w.Visible)</div>
                                </div>
                            </div>
                            <div style="text-align:center; padding:40px 20px; color:#999; border:2px dashed #d9d9d9; border-radius:4px">
                                <Icon Type="@IconType.Outline.Select" Style="font-size:36px; margin-bottom:8px" />
                                <div style="font-size:12px">@I18n.T("LBL_SELECT_COMPONENT")</div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
    else
    {
        <!-- Browse and Edit Mode: Normal view -->
        <div style="display:flex; justify-content:space-between; align-items:center; margin-bottom:24px; padding-bottom:16px; border-bottom:1px solid var(--border)">
            <div>
                <h1 style="margin:0; font-size:24px">@customer.name</h1>
                <div style="color:var(--muted); font-size:14px; margin-top:4px">@I18n.T("COL_CODE"): @customer.code</div>
            </div>

            <div style="display:flex; gap:8px">
                <Button Type="@(mode == ViewMode.Browse ? ButtonType.Primary : ButtonType.Default)" OnClick="@(() => SwitchMode(ViewMode.Browse))">
                    @I18n.T("MODE_BROWSE")
                </Button>
                <Button Type="@(mode == ViewMode.Edit ? ButtonType.Primary : ButtonType.Default)" OnClick="@(() => SwitchMode(ViewMode.Edit))">
                    @I18n.T("MODE_EDIT")
                </Button>
                <Button Type="@(mode == ViewMode.Design ? ButtonType.Primary : ButtonType.Default)" OnClick="@(() => SwitchMode(ViewMode.Design))">
                    @I18n.T("MODE_DESIGN")
                </Button>
            </div>
        </div>

        @if (mode == ViewMode.Browse)
        {
            <!-- Browse Mode: WYSIWYG display using saved layout -->
            <div style="display:flex; flex-wrap:wrap; gap:12px; align-content:flex-start">
                @foreach (var widget in layoutWidgets.Where(w => w.Visible))
                {
                    <div style="@GetWidgetStyle(widget)">
                        @{
                            var fieldData = widget.DataField != null ? customer.fields?.FirstOrDefault(f => f.key == widget.DataField) : null;
                            var displayValue = fieldData?.value ?? widget.Label;
                        }
                        @if (widget.Type == "textbox" || widget.Type == "label")
                        {
                            <div style="padding:8px; border:1px solid #d9d9d9; border-radius:4px; background:#fafafa">
                                <div style="font-size:12px; color:#666; margin-bottom:4px">@(fieldData?.label ?? widget.Label)</div>
                                <div>@displayValue</div>
                            </div>
                        }
                        else if (widget.Type == "calendar")
                        {
                            <div style="padding:8px; border:1px solid #d9d9d9; border-radius:4px; background:#fafafa">
                                <div style="font-size:12px; color:#666; margin-bottom:4px">@(fieldData?.label ?? widget.Label)</div>
                                <div>@displayValue</div>
                            </div>
                        }
                    </div>
                }
            </div>
        }
        else if (mode == ViewMode.Edit)
        {
            <!-- Edit Mode: WYSIWYG editable fields -->
            <div style="display:flex; flex-wrap:wrap; gap:12px; align-content:flex-start">
                @foreach (var widget in layoutWidgets.Where(w => w.Visible))
                {
                    <div style="@GetWidgetStyle(widget)">
                        @{
                            var fieldData = widget.DataField != null ? customer.fields?.FirstOrDefault(f => f.key == widget.DataField) : null;
                        }
                        @if (widget.Type == "textbox")
                        {
                            <div style="padding:8px">
                                <label style="display:block; font-size:12px; color:#666; margin-bottom:4px">@(fieldData?.label ?? widget.Label)</label>
                                <Input @bind-Value="editValues[widget.DataField ?? widget.Id]" />
                            </div>
                        }
                        else if (widget.Type == "calendar")
                        {
                            <div style="padding:8px">
                                <label style="display:block; font-size:12px; color:#666; margin-bottom:4px">@(fieldData?.label ?? widget.Label)</label>
                                <DatePicker TValue="DateTime?" style="width:100%" />
                            </div>
                        }
                    </div>
                }
            </div>
            <div style="margin-top:20px; display:flex; gap:12px">
                <Button Type="@ButtonType.Primary" OnClick="SaveChanges">@I18n.T("BTN_SAVE")</Button>
                <Button OnClick="@(() => SwitchMode(ViewMode.Browse))">@I18n.T("BTN_CANCEL")</Button>
            </div>
        }

        <div style="margin-top:24px; padding-top:16px; border-top:1px solid var(--border)">
            <Button OnClick="GoBack">@I18n.T("BTN_BACK")</Button>
        </div>
    }
}
else
{
    <div>@I18n.T("LBL_NOT_FOUND")</div>
}
</AuthChecker>

@code {
    [Parameter] public int Id { get; set; }

    private enum ViewMode { Browse, Edit, Design }
    private ViewMode mode = ViewMode.Browse;

    private CustomerDetailModel? customer;
    private bool loading = true;
    private string? error;
    private Dictionary<string, string> editValues = new();

    // Designer state
    private List<LayoutWidget> layoutWidgets = new();
    private LayoutWidget? selectedWidget = null;
    private ComponentDefinition? draggedComponent = null;
    private LayoutWidget? draggedWidget = null;
    private bool dropSucceeded = false;
    private ElementReference canvasRef;

    // Component definitions
    private List<ComponentDefinition> basicComponents = new()
    {
        new() { Type = "textbox", Label = "LBL_TEXTBOX", Icon = IconType.Outline.Edit },
        new() { Type = "label", Label = "LBL_LABEL", Icon = IconType.Outline.FileText },
        new() { Type = "calendar", Label = "LBL_CALENDAR", Icon = IconType.Outline.Calendar },
        new() { Type = "listbox", Label = "LBL_LISTBOX", Icon = IconType.Outline.UnorderedList },
    };

    private List<ComponentDefinition> layoutComponents = new()
    {
        new() { Type = "frame", Label = "LBL_FRAME", Icon = IconType.Outline.BorderOuter },
        new() { Type = "tabbox", Label = "LBL_TABBOX", Icon = IconType.Outline.AppstoreAdd },
    };

    protected override void OnInitialized()
    {
        I18n.OnChanged += HandleI18nChanged;
        InitializeDefaultLayout();
    }

    private void InitializeDefaultLayout()
    {
        // Create default widgets for existing fields
        if (customer?.fields != null)
        {
            foreach (var field in customer.fields)
            {
                layoutWidgets.Add(new LayoutWidget
                {
                    Id = Guid.NewGuid().ToString(),
                    Type = "textbox",
                    Label = field.label ?? field.key ?? "",
                    DataField = field.key,
                    Width = 48,
                    WidthUnit = "%",
                    Visible = true
                });
            }
        }
    }

    private void InitializeEditValues()
    {
        editValues.Clear();
        foreach (var widget in layoutWidgets.Where(w => !string.IsNullOrEmpty(w.DataField)))
        {
            var field = customer?.fields?.FirstOrDefault(f => f.key == widget.DataField);
            editValues[widget.DataField!] = field?.value ?? "";
        }
    }

    private void HandleI18nChanged()
    {
        try { InvokeAsync(StateHasChanged); } catch { }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Initialize drag and drop support
                await JS.InvokeVoidAsync("bobcrm.initDragDrop");

                var saved = await JS.InvokeAsync<string?>("bobcrm.getCookie", "lang");
                var langToLoad = !string.IsNullOrWhiteSpace(saved) ? saved! : "ja";
                await I18n.LoadAsync(langToLoad);
                await InvokeAsync(StateHasChanged);

                var resp = await Auth.GetWithRefreshAsync($"/api/customers/{Id}");
                if (!resp.IsSuccessStatusCode)
                {
                    error = resp.StatusCode == System.Net.HttpStatusCode.NotFound
                        ? I18n.T("LBL_NOT_FOUND")
                        : $"{I18n.T("LBL_LOAD_FAILED")}: {(int)resp.StatusCode}";
                }
                else
                {
                    customer = await resp.Content.ReadFromJsonAsync<CustomerDetailModel>();
                    await LoadLayoutFromServer();
                    InitializeEditValues();
                }
                loading = false;
                StateHasChanged();
            }
            catch { loading = false; error = "Load error"; StateHasChanged(); }
        }

    }

    public void Dispose()
    {
        I18n.OnChanged -= HandleI18nChanged;
    }

    private void GoBack() => Nav.NavigateTo("/customers");

    private void SwitchMode(ViewMode newMode)
    {
        if (newMode == ViewMode.Edit)
        {
            InitializeEditValues();
        }
        mode = newMode;
        StateHasChanged();
    }

    private async Task SaveChanges()
    {
        // TODO: Implement save
        await Task.CompletedTask;
        SwitchMode(ViewMode.Browse);
    }

    private async Task LoadLayoutFromServer()
    {
        try
        {
            var resp = await Auth.GetWithRefreshAsync($"/api/layout/{Id}?scope=effective");
            if (resp.IsSuccessStatusCode)
            {
                var layoutJson = await resp.Content.ReadAsStringAsync();
                var layoutData = System.Text.Json.JsonSerializer.Deserialize<System.Text.Json.JsonElement>(layoutJson);

                // Check layout mode
                if (layoutData.TryGetProperty("mode", out var modeEl) && modeEl.GetString() == "flow")
                {
                    // Load flow layout
                    if (layoutData.TryGetProperty("items", out var itemsEl))
                    {
                        layoutWidgets.Clear();
                        var sortedItems = new List<(string key, System.Text.Json.JsonElement item)>();

                        foreach (var prop in itemsEl.EnumerateObject())
                        {
                            sortedItems.Add((prop.Name, prop.Value));
                        }

                        // Sort by order
                        sortedItems.Sort((a, b) =>
                        {
                            var orderA = a.item.TryGetProperty("order", out var oA) ? oA.GetInt32() : 0;
                            var orderB = b.item.TryGetProperty("order", out var oB) ? oB.GetInt32() : 0;
                            return orderA.CompareTo(orderB);
                        });

                        for (int i = 0; i < sortedItems.Count; i++)
                        {
                            var (key, item) = sortedItems[i];
                            var colWidth = item.TryGetProperty("w", out var wEl) ? wEl.GetInt32() : 6;
                            var visible = item.TryGetProperty("visible", out var vEl) ? vEl.GetBoolean() : true;
                            var label = item.TryGetProperty("label", out var lEl) ? lEl.GetString() : key;
                            var type = item.TryGetProperty("type", out var tEl) ? tEl.GetString() : "textbox";

                            // 读取扩展属性
                            var height = item.TryGetProperty("height", out var hEl) ? hEl.GetInt32() : 40;
                            var heightUnit = item.TryGetProperty("heightUnit", out var huEl) ? huEl.GetString() : "px";
                            var defaultValue = item.TryGetProperty("defaultValue", out var dvEl) ? dvEl.GetString() : null;
                            var placeholder = item.TryGetProperty("placeholder", out var phEl) ? phEl.GetString() : null;
                            var required = item.TryGetProperty("required", out var rqEl) ? rqEl.GetBoolean() : false;
                            var readOnly = item.TryGetProperty("readonly", out var roEl) ? roEl.GetBoolean() : false;
                            var disabled = item.TryGetProperty("disabled", out var dsEl) ? dsEl.GetBoolean() : false;
                            int? minValue = item.TryGetProperty("minValue", out var mnEl) ? mnEl.GetInt32() : null;
                            int? maxValue = item.TryGetProperty("maxValue", out var mxEl) ? mxEl.GetInt32() : null;
                            int? maxLength = item.TryGetProperty("maxLength", out var mlEl) ? mlEl.GetInt32() : null;

                            layoutWidgets.Add(new LayoutWidget
                            {
                                Id = Guid.NewGuid().ToString(),
                                Type = type ?? "textbox",
                                Label = label ?? key,
                                DataField = key,
                                Width = (int)Math.Round(colWidth * 8.33), // 1-12列转换为百分比
                                WidthUnit = "%",
                                Height = height,
                                HeightUnit = heightUnit ?? "px",
                                X = i * 10, // Use order as X for sorting
                                Visible = visible,
                                DefaultValue = defaultValue,
                                Placeholder = placeholder,
                                Required = required,
                                Readonly = readOnly,
                                Disabled = disabled,
                                MinValue = minValue,
                                MaxValue = maxValue,
                                MaxLength = maxLength
                            });
                        }
                        return;
                    }
                }
            }

            // Fallback: generate default layout from fields
            InitializeDefaultLayout();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to load layout: {ex.Message}");
            InitializeDefaultLayout();
        }
    }

    private async Task SaveLayout()
    {
        try
        {
            // Build flow layout JSON (列表顺序即为显示顺序)
            var items = new Dictionary<string, object>();
            for (int i = 0; i < layoutWidgets.Count; i++)
            {
                var w = layoutWidgets[i];
                var key = w.DataField ?? w.Id;

                // 构建基础属性
                var itemData = new Dictionary<string, object>
                {
                    ["order"] = i,
                    ["w"] = (int)Math.Round(w.Width / 8.33), // 转换为1-12列
                    ["visible"] = w.Visible,
                    ["label"] = w.Label,
                    ["type"] = w.Type,
                    ["height"] = w.Height,
                    ["heightUnit"] = w.HeightUnit
                };

                // 添加可选属性（非默认值时才保存）
                if (!string.IsNullOrWhiteSpace(w.DefaultValue))
                    itemData["defaultValue"] = w.DefaultValue;
                if (!string.IsNullOrWhiteSpace(w.Placeholder))
                    itemData["placeholder"] = w.Placeholder;
                if (w.Required)
                    itemData["required"] = w.Required;
                if (w.Readonly)
                    itemData["readonly"] = w.Readonly;
                if (w.Disabled)
                    itemData["disabled"] = w.Disabled;
                if (w.MinValue.HasValue)
                    itemData["minValue"] = w.MinValue.Value;
                if (w.MaxValue.HasValue)
                    itemData["maxValue"] = w.MaxValue.Value;
                if (w.MaxLength.HasValue)
                    itemData["maxLength"] = w.MaxLength.Value;
                if (w.ExtendedProperties != null && w.ExtendedProperties.Any())
                    itemData["extended"] = w.ExtendedProperties;

                items[key] = itemData;
            }

            var layout = new
            {
                mode = "flow",
                items = items
            };

            var resp = await Auth.PostAsJsonWithRefreshAsync($"/api/layout/{Id}", layout);
            if (resp.IsSuccessStatusCode)
            {
                // Success - show notification
                await JS.InvokeVoidAsync("console.log", "[SaveLayout] Success");
            }
            else
            {
                // Error - show notification
                await JS.InvokeVoidAsync("console.error", $"[SaveLayout] Failed: {resp.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", $"[SaveLayout] Exception: {ex.Message}");
        }

        SwitchMode(ViewMode.Browse);
    }

    // Drag and drop handlers
    private async Task OnDragStart(Microsoft.AspNetCore.Components.Web.DragEventArgs e, ComponentDefinition component)
    {
        dropSucceeded = false;  // Reset flag at start of drag
        draggedComponent = component;
        try
        {
            await JS.InvokeVoidAsync("console.log", $"[C#] OnDragStart: {component.Type}");
        }
        catch { /* Ignore JS errors */ }
        // dataTransfer is set via data-* attributes and global dragstart handler in app.js
    }

    private async Task OnWidgetDragStart(Microsoft.AspNetCore.Components.Web.DragEventArgs e, LayoutWidget widget)
    {
        dropSucceeded = false;  // Reset flag at start of drag
        draggedWidget = widget;
        try
        {
            await JS.InvokeVoidAsync("console.log", $"[C#] OnWidgetDragStart: {widget.Id}");
        }
        catch { /* Ignore JS errors */ }
        // dataTransfer is set via data-* attributes and global dragstart handler in app.js
    }

    private void OnDragOver(Microsoft.AspNetCore.Components.Web.DragEventArgs e)
    {
        // Allow drop by preventing default behavior
        // This method is explicitly called to ensure dragover events are handled correctly
    }

    private async Task OnDrop(Microsoft.AspNetCore.Components.Web.DragEventArgs e)
    {
        try
        {
            await JS.InvokeVoidAsync("console.log",
                $"[C#] OnDrop: component={draggedComponent?.Type ?? "null"}, widget={draggedWidget?.Id ?? "null"}, count={layoutWidgets.Count}, pos=({e.ClientX},{e.ClientY})");
        }
        catch { /* Ignore JS errors */ }

        if (draggedComponent != null)
        {
            // New component from toolbox
            var newWidget = new LayoutWidget
            {
                Id = Guid.NewGuid().ToString(),
                Type = draggedComponent.Type,
                Label = I18n.T(draggedComponent.Label),
                Width = 48,
                WidthUnit = "%",
                Visible = true
            };

            // Get drop coordinates and calculate insertion index
            try
            {
                var insertIndex = await JS.InvokeAsync<int>("bobcrm.getInsertIndex", ".layout-widgets-container", e.ClientX, e.ClientY);
                if (insertIndex >= 0 && insertIndex < layoutWidgets.Count)
                {
                    layoutWidgets.Insert(insertIndex, newWidget);
                }
                else if (insertIndex >= layoutWidgets.Count)
                {
                    layoutWidgets.Add(newWidget);
                }
                else
                {
                    // Fallback: try to insert after selected widget
                    if (selectedWidget != null && layoutWidgets.Contains(selectedWidget))
                    {
                        var selectedIndex = layoutWidgets.IndexOf(selectedWidget);
                        layoutWidgets.Insert(selectedIndex + 1, newWidget);
                    }
                    else
                    {
                        layoutWidgets.Add(newWidget);
                    }
                }
            }
            catch
            {
                // Fallback: try to insert after selected widget or append
                if (selectedWidget != null && layoutWidgets.Contains(selectedWidget))
                {
                    var selectedIndex = layoutWidgets.IndexOf(selectedWidget);
                    layoutWidgets.Insert(selectedIndex + 1, newWidget);
                }
                else
                {
                    layoutWidgets.Add(newWidget);
                }
            }

            // Update X values to reflect order
            ReorderWidgetsByIndex();

            selectedWidget = newWidget;
            dropSucceeded = true;
            draggedComponent = null;
            try
            {
                await JS.InvokeVoidAsync("console.log", $"  ✓ Widget added! Total: {layoutWidgets.Count}");
            }
            catch { /* Ignore JS errors */ }
            StateHasChanged();
        }
        else if (draggedWidget != null)
        {
            // Reorder existing widget
            var widgetToMove = draggedWidget;
            var originalIndex = layoutWidgets.IndexOf(widgetToMove);

            if (originalIndex >= 0)
            {
                // Get drop coordinates and calculate insertion index
                try
                {
                    var insertIndex = await JS.InvokeAsync<int>("bobcrm.getInsertIndex", ".layout-widgets-container", e.ClientX, e.ClientY);

                    if (insertIndex >= 0)
                    {
                        // Remove from original position
                        layoutWidgets.RemoveAt(originalIndex);

                        // Adjust insert index if widget was removed before target position
                        if (insertIndex > originalIndex)
                        {
                            insertIndex--;
                        }

                        // Insert at new position
                        if (insertIndex >= 0 && insertIndex <= layoutWidgets.Count)
                        {
                            layoutWidgets.Insert(insertIndex, widgetToMove);
                            selectedWidget = widgetToMove;
                        }
                        else
                        {
                            // Fallback: append
                            layoutWidgets.Add(widgetToMove);
                            selectedWidget = widgetToMove;
                        }

                        // Update X values to reflect new order
                        ReorderWidgetsByIndex();
                    }
                    else
                    {
                        // If can't calculate, just reset state
                        selectedWidget = widgetToMove;
                    }
                }
                catch
                {
                    // If calculation fails, just reset state
                    selectedWidget = widgetToMove;
                }
            }

            dropSucceeded = true;
            draggedWidget = null;
            StateHasChanged();
        }
        else
        {
            try
            {
                await JS.InvokeVoidAsync("console.log", "  ⚠ No draggedComponent or draggedWidget - drop ignored");
            }
            catch { /* Ignore JS errors */ }
        }
    }

    private void ReorderWidgetsByIndex()
    {
        // Update X values based on list index (for reference only)
        // Note: X is no longer used for ordering, list order is the display order
        for (int i = 0; i < layoutWidgets.Count; i++)
        {
            layoutWidgets[i].X = i * 10;
        }
    }


    private async Task OnDragEnd(Microsoft.AspNetCore.Components.Web.DragEventArgs e)
    {
        try
        {
            // Log in a single call to reduce interop overhead
            await JS.InvokeVoidAsync("console.log",
                $"[C#] OnDragEnd: component={draggedComponent?.Type ?? "null"}, widget={draggedWidget?.Id ?? "null"}, dropSucceeded={dropSucceeded}");

            // Delay to allow OnDrop to complete first
            // (dragend can fire before drop in some browsers)
            await Task.Delay(50);

            // Only clean up if drop didn't succeed
            // If drop succeeded, OnDrop already cleaned up draggedComponent/draggedWidget
            if (!dropSucceeded)
            {
                draggedComponent = null;
                draggedWidget = null;
                StateHasChanged();
            }

            // Always reset the flag for next drag
            dropSucceeded = false;
        }
        catch
        {
            // Silently handle interop errors (circuit may be disconnected)
            // Just clean up the state
            draggedComponent = null;
            draggedWidget = null;
            dropSucceeded = false;
        }
    }

    private void SelectWidget(LayoutWidget widget)
    {
        selectedWidget = widget;
        StateHasChanged();
    }

    private void UpdateWidget()
    {
        StateHasChanged();
    }

    private async Task OnResizeStart(Microsoft.AspNetCore.Components.Web.MouseEventArgs e, LayoutWidget widget)
    {
        try
        {
            // 启动调整大小模式
            var dotNetRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("bobcrm.startWidgetResize", dotNetRef, widget.Id, e.ClientX, widget.Width, widget.WidthUnit);
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", $"Failed to start resize: {ex.Message}");
        }
    }

    [JSInvokable]
    public void OnWidgetResized(string widgetId, int newWidth, string unit)
    {
        var widget = layoutWidgets.FirstOrDefault(w => w.Id == widgetId);
        if (widget != null)
        {
            widget.Width = newWidth;
            widget.WidthUnit = unit;
            StateHasChanged();
        }
    }

    private void DeleteSelectedWidget()
    {
        if (selectedWidget != null)
        {
            layoutWidgets.Remove(selectedWidget);
            selectedWidget = null;
            StateHasChanged();
        }
    }

    private string GetWidgetStyle(LayoutWidget widget)
    {
        var width = widget.WidthUnit == "%"
            ? $"calc({widget.Width}% - 6px)"
            : $"{widget.Width}px";

        var border = selectedWidget == widget ? "border:2px solid #1890ff !important" : "border:1px solid #e0e0e0";

        return $"width:{width}; {border}";
    }

    private string GetFlowWidgetStyle(LayoutWidget widget)
    {
        // 使用Width作为flex-basis的百分比 (1-12列，每列约8.33%)
        var flexBasis = widget.WidthUnit == "%"
            ? $"calc({widget.Width}% - 6px)"
            : $"{widget.Width}px";

        var height = widget.HeightUnit == "auto" || widget.HeightUnit == "px"
            ? (widget.HeightUnit == "auto" ? "auto" : $"{widget.Height}px")
            : $"{widget.Height}px";

        var border = selectedWidget == widget ? "2px solid #1890ff" : "1px solid #e0e0e0";

        return $"flex:0 0 {flexBasis}; max-width:{flexBasis}; min-height:{height}; background:#fff; border-radius:4px; border:{border}; box-shadow:0 1px 3px rgba(0,0,0,0.1); cursor:move; user-select:none; transition: all 0.2s ease; position:relative;";
    }

    // Models
    private class CustomerDetailModel
    {
        public int id { get; set; }
        public string? code { get; set; }
        public string? name { get; set; }
        public int version { get; set; }
        public FieldDetail[]? fields { get; set; }
    }

    private class FieldDetail
    {
        public string? key { get; set; }
        public string? label { get; set; }
        public string? type { get; set; }
        public string? value { get; set; }
        public bool required { get; set; }
        public string? validation { get; set; }
    }

    private class ComponentDefinition
    {
        public string Type { get; set; } = "";
        public string Label { get; set; } = "";
        public string Icon { get; set; } = "";
    }

    private class LayoutWidget
    {
        public string Id { get; set; } = "";
        public string Type { get; set; } = "";
        public string Label { get; set; } = "";
        public string? DataField { get; set; }
        public int Width { get; set; } = 48;
        public string WidthUnit { get; set; } = "%";
        public int Height { get; set; } = 40; // 控件高度（像素）
        public string HeightUnit { get; set; } = "px";
        public bool Visible { get; set; } = true;
        public string? DefaultValue { get; set; } // 默认值
        public string? Placeholder { get; set; } // 占位符
        public bool Required { get; set; } = false; // 是否必填
        public bool Readonly { get; set; } = false; // 是否只读
        public bool Disabled { get; set; } = false; // 是否禁用
        public int? MinValue { get; set; } // 最小值（数字类型）
        public int? MaxValue { get; set; } // 最大值（数字类型）
        public int? MaxLength { get; set; } // 最大长度（文本类型）

        // 位置属性（保留用于其他布局模式）
        public int X { get; set; } = 24;
        public int Y { get; set; } = 24;
        public int W { get; set; } = 360;
        public int H { get; set; } = 56;

        // 扩展属性（用于未来扩展，以JSON格式存储）
        public Dictionary<string, object>? ExtendedProperties { get; set; }

        // 判断某个属性是否可编辑（根据控件类型）
        public bool CanEditProperty(string propertyName)
        {
            return propertyName switch
            {
                "Height" => Type != "section" && Type != "divider", // 分组和分隔线不能调整高度
                "DefaultValue" => Type == "textbox" || Type == "number" || Type == "textarea" || Type == "select",
                "Placeholder" => Type == "textbox" || Type == "number" || Type == "textarea",
                "Required" => Type != "section" && Type != "divider" && Type != "label",
                "Readonly" => Type == "textbox" || Type == "number" || Type == "textarea",
                "MinValue" => Type == "number",
                "MaxValue" => Type == "number",
                "MaxLength" => Type == "textbox" || Type == "textarea",
                _ => true
            };
        }
    }

    private record Position(int x, int y);
}
