@page "/customers/{Id:int}"

<h1>客户详情</h1>

@if (_detail is null)
{
    <Spin Spinning="true" />
}
else
{
    <Descriptions Title="@(_detail.name + "(" + _detail.code + ") 版本:" + _detail.version)" Column="1" Bordered>
        @foreach (var f in _detail.fields)
        {
            <DescriptionsItem Title="@f.label">
                @RenderField(f)
            </DescriptionsItem>
        }
    </Descriptions>
}

@code {
    [Parameter] public int Id { get; set; }

    private CustomerDetailDto? _detail;

    [Inject] public IHttpClientFactory HttpFactory { get; set; } = default!;
    [Inject] public IJSRuntime JS { get; set; } = default!;

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            var token = await JS.InvokeAsync<string?>("localStorage.getItem", "accessToken");
            var http = HttpFactory.CreateClient("api");
            if (!string.IsNullOrWhiteSpace(token))
                http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
            var resp = await http.GetAsync($"/api/customers/{Id}");
            if (resp.IsSuccessStatusCode)
            {
                _detail = await resp.Content.ReadFromJsonAsync<CustomerDetailDto>();
                return;
            }
        }
        catch {}
        // fallback mock
        _detail = new CustomerDetailDto(Id, Id==1?"C001":"C002", Id==1?"客户A":"客户B", 1,
            new List<FieldDto>{ new("email","邮箱","email","a@b.com") });
    }

    RenderFragment RenderField(FieldDto f) => f.type switch
    {
        "email" => builder => builder.AddMarkupContent(0, $"<a href=\"mailto:{f.value}\">{f.value}</a>"),
        "rds" => builder =>
        {
            var je = (JsonElement)f.value;
            var ip = je.GetProperty("ip").GetString();
            var user = je.GetProperty("user").GetString();
            builder.AddContent(0, $"IP: {ip} 用户: {user}");
        },
        _ => builder => builder.AddContent(0, f.value?.ToString())
    };

    public record CustomerDetailDto(int id, string code, string name, int version, List<FieldDto> fields);
    public record FieldDto(string key, string label, string type, object value);
}
