@page "/customers/{Id:int}"

<h1>客户详情</h1>

@if (_detail is null)
{
    <Spin Spinning="true" />
}
else
{
    <Descriptions Title="@(_detail.name + "(" + _detail.code + ") 版本:" + _detail.version)" Column="1" Bordered>
        @foreach (var f in _detail.fields)
        {
            <DescriptionsItem Title="@((f.required?"* ":string.Empty) + f.label)">
                @RenderEditor(f)
                @if (_errors.TryGetValue(f.key, out var err) && !string.IsNullOrWhiteSpace(err))
                {
                    <div style="color:#ff4d4f;margin-top:4px;">@err</div>
                }
            </DescriptionsItem>
        }
    </Descriptions>
    <div style="margin-top:12px;">
        <Button Type="primary" OnClick="SaveAsync">保存</Button>
        <span style="margin-left:8px;color:#999;">保存时会携带 expectedVersion=@_detail.version</span>
    </div>
}

@code {
    [Parameter] public int Id { get; set; }

    private CustomerDetailDto? _detail;

    [Inject] public BobCrm.App.Services.AuthService Auth { get; set; } = default!;
    [Inject] public IJSRuntime JS { get; set; } = default!;
    [Inject] public MessageService Message { get; set; } = default!;

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            var resp = await Auth.GetWithRefreshAsync($"/api/customers/{Id}");
            if (resp.IsSuccessStatusCode)
            {
                _detail = await resp.Content.ReadFromJsonAsync<CustomerDetailDto>();
                _errors.Clear();
                return;
            }
        }
        catch {}
        // fallback mock
        _detail = new CustomerDetailDto(Id, Id==1?"C001":"C002", Id==1?"客户A":"客户B", 1,
            new List<FieldDto>{ new("email","邮箱","email","a@b.com", true, @"^[^@\s]+@[^@\s]+\.[^@\s]+$") });
    }

    // 编辑器渲染：简单按类型映射到可编辑控件
    RenderFragment RenderEditor(FieldDto f) => f.type switch
    {
        "email" => builder =>
        {
            var val = f.value?.ToString() ?? string.Empty;
            builder.OpenComponent<Input<string>>(0);
            builder.AddAttribute(1, "Value", val);
            builder.AddAttribute(2, "ValueChanged", EventCallback.Factory.Create<string>(this, v => SetField(f.key, v)));
            builder.AddAttribute(3, "OnBlur", EventCallback.Factory.Create(this, () => ValidateField(f.key, f.required, f.validation)));
            builder.CloseComponent();
        },
        _ => builder =>
        {
            var val = f.value?.ToString() ?? string.Empty;
            builder.OpenComponent<Input<string>>(0);
            builder.AddAttribute(1, "Value", val);
            builder.AddAttribute(2, "ValueChanged", EventCallback.Factory.Create<string>(this, v => SetField(f.key, v)));
            builder.AddAttribute(3, "OnBlur", EventCallback.Factory.Create(this, () => ValidateField(f.key, f.required, f.validation)));
            builder.CloseComponent();
        }
    };

    public record CustomerDetailDto(int id, string code, string name, int version, List<FieldDto> fields);
    public record FieldDto(string key, string label, string type, object value, bool required, string? validation);

    // 本地编辑缓冲
    private Dictionary<string, object?> _changes = new();
    private Dictionary<string, string?> _errors = new();
    void SetField(string key, object? value)
    {
        _changes[key] = value;
        // 即时校验（有元数据时）
        var meta = _detail?.fields.FirstOrDefault(x => x.key == key);
        if (meta is not null)
            ValidateField(key, meta.required, meta.validation);
    }

    private void ValidateField(string key, bool required, string? pattern)
    {
        string? error = null;
        _changes.TryGetValue(key, out var val);
        var text = val?.ToString() ?? _detail?.fields.FirstOrDefault(x => x.key == key)?.value?.ToString() ?? string.Empty;
        if (required && string.IsNullOrWhiteSpace(text))
            error = "必填项";
        if (error is null && !string.IsNullOrWhiteSpace(pattern))
        {
            try
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(text, pattern))
                    error = "格式不正确";
            }
            catch { /* ignore invalid pattern on client */ }
        }
        if (!string.IsNullOrWhiteSpace(error)) _errors[key] = error; else _errors.Remove(key);
    }

    private bool ValidateAll()
    {
        if (_detail is null) return false;
        foreach (var f in _detail.fields)
        {
            ValidateField(f.key, f.required, f.validation);
        }
        return _errors.Count == 0;
    }

    private async Task SaveAsync()
    {
        if (_detail is null) return;
        var fields = _changes.Select(kv => new { key = kv.Key, value = kv.Value }).ToList();
        if (fields.Count == 0)
        {
            await Message.Info("没有变更可保存");
            return;
        }
        // 本地校验
        if (!ValidateAll())
        {
            await Message.Error("请先修正表单中的错误");
            return;
        }

        var body = new { fields, expectedVersion = _detail.version };
        var req = new HttpRequestMessage(HttpMethod.Put, $"/api/customers/{_detail.id}")
        {
            Content = JsonContent.Create(body)
        };
        var resp = await Auth.SendWithRefreshAsync(req);
        if (resp.IsSuccessStatusCode)
        {
            await Message.Success("保存成功");
            _changes.Clear();
            // 重新加载以刷新版本
            await OnParametersSetAsync();
            StateHasChanged();
        }
        else if (resp.StatusCode == System.Net.HttpStatusCode.Conflict)
        {
            await Message.Error("版本冲突：数据已变更，请刷新后重试");
            await OnParametersSetAsync();
            StateHasChanged();
        }
        else
        {
            var text = await resp.Content.ReadAsStringAsync();
            await Message.Error($"保存失败: {resp.StatusCode} {text}");
        }
    }
}
