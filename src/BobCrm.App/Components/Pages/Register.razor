@page "/register"

@inject BobCrm.App.Services.I18nService I18n

<h1>@I18n.T("LBL_REGISTER")</h1>

<EditForm Model="_model" OnValidSubmit="HandleRegisterAsync">
    <DataAnnotationsValidator />
    <div style="max-width:420px;">
        <FormItem Label='@I18n.T("LBL_USERNAME")'>
            <Input @bind-Value="_model.Username" />
        </FormItem>
        <FormItem Label='@I18n.T("LBL_EMAIL")'>
            <Input @bind-Value="_model.Email" />
        </FormItem>
        <FormItem Label='@I18n.T("LBL_PASSWORD")'>
            <InputPassword @bind-Value="_model.Password" />
        </FormItem>
        <FormItem>
            <Button Type="primary" OnClick="HandleRegisterAsync">@I18n.T("BTN_REGISTER")</Button>
        </FormItem>
    </div>
    <ValidationSummary />
    <div>@_error</div>
</EditForm>

<div style="margin-top:16px; color:#888;">
    @I18n.T("TXT_REGISTER_HELP") <a href="/activate">@I18n.T("LBL_ACTIVATE_TITLE")</a>
    
</div>

@code {
    private RegModel _model = new();
    private string? _error;

    [Inject] public IHttpClientFactory HttpFactory { get; set; } = default!;
    [Inject] public MessageService Message { get; set; } = default!;
    [Inject] public NavigationManager Nav { get; set; } = default!;
    [Inject] public IJSRuntime JS { get; set; } = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var savedLang = await JS.InvokeAsync<string?>("localStorage.getItem", "lang");
                var langToLoad = !string.IsNullOrWhiteSpace(savedLang) ? savedLang! : "ja";
                await I18n.LoadAsync(langToLoad); try { await JS.InvokeVoidAsync("bobcrm.setLang", langToLoad); } catch { }
            }
            catch { }
        }
    }

    private async Task HandleRegisterAsync()
    {
        try
        {
            var http = HttpFactory.CreateClient("api");
            // attach X-Lang header
            try { var lang = await JS.InvokeAsync<string?>("localStorage.getItem", "lang"); if (!string.IsNullOrWhiteSpace(lang)) { if (http.DefaultRequestHeaders.Contains("X-Lang")) http.DefaultRequestHeaders.Remove("X-Lang"); http.DefaultRequestHeaders.Add("X-Lang", lang!.ToLowerInvariant()); } } catch { }
            var resp = await http.PostAsJsonAsync("/api/auth/register", new { username = _model.Username, password = _model.Password, email = _model.Email });
            if (!resp.IsSuccessStatusCode)
            {
                _error = await resp.Content.ReadAsStringAsync();
                return;
            }
            await Message.Success(I18n.T("MSG_REGISTER_SUCCESS"));
            Nav.NavigateTo("/activate");
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
    }

    class RegModel
    {
        public string Username { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }
}
