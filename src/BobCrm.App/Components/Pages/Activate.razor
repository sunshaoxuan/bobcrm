@page "/activate"

<h1>@I18n.T("LBL_ACTIVATE_TITLE")</h1>

<div style="max-width:480px;">
    <FormItem Label='@I18n.T("LBL_USER_ID")'>
        <Input @bind-Value="_userId" />
    </FormItem>
    <FormItem Label='@I18n.T("LBL_CODE")'>
        <Input @bind-Value="_code" />
    </FormItem>
    <FormItem>
        <Button Type="primary" OnClick="HandleActivateAsync">@I18n.T("BTN_ACTIVATE")</Button>
    </FormItem>

    <div>@_msg</div>
</div>

@code {
    private string? _userId;
    private string? _code;
    private string? _msg;

    [Inject] public IHttpClientFactory HttpFactory { get; set; } = default!;
    [Inject] public NavigationManager Nav { get; set; } = default!;
    [Inject] public MessageService Message { get; set; } = default!;
    [Inject] public IJSRuntime JS { get; set; } = default!;

    [Inject] public BobCrm.App.Services.I18nService I18n { get; set; } = default!;

    protected override Task OnInitializedAsync()
    {
        // 支持从 URL 查询参数预填
        var uri = new Uri(Nav.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        _userId = query["userId"] ?? _userId;
        _code = query["code"] ?? _code;
        return Task.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var savedLang = await JS.InvokeAsync<string?>("localStorage.getItem", "lang");
                if (!string.IsNullOrWhiteSpace(savedLang)) { await I18n.LoadAsync(savedLang!); try { await JS.InvokeVoidAsync("bobcrm.setLang", savedLang); } catch { } }
            }
            catch { }
        }
    }

    private async Task HandleActivateAsync()
    {
        if (string.IsNullOrWhiteSpace(_userId) || string.IsNullOrWhiteSpace(_code))
        {
            _msg = I18n.T("ERR_ACTIVATE_FILL");
            return;
        }
        var http = HttpFactory.CreateClient("api");
        // attach X-Lang header
        try { var lang = await JS.InvokeAsync<string?>("localStorage.getItem", "lang"); if (!string.IsNullOrWhiteSpace(lang)) { if (http.DefaultRequestHeaders.Contains("X-Lang")) http.DefaultRequestHeaders.Remove("X-Lang"); http.DefaultRequestHeaders.Add("X-Lang", lang!.ToLowerInvariant()); } } catch { }
        var url = $"/api/auth/activate?userId={Uri.EscapeDataString(_userId)}&code={Uri.EscapeDataString(_code)}";
        var resp = await http.GetAsync(url);
        if (resp.IsSuccessStatusCode)
        {
            await Message.Success(I18n.T("MSG_ACTIVATE_SUCCESS"));
            Nav.NavigateTo("/login");
        }
        else
        {
            _msg = $"{I18n.T("ERR_ACTIVATE_FAILED")}: {resp.StatusCode} {await resp.Content.ReadAsStringAsync()}";
        }
    }
}
