@page "/setup"
@layout BobCrm.App.Components.Layout.EmptyLayout
@inject IJSRuntime JS
@inject NavigationManager Nav

<h1>初始配置</h1>

<div>
    <div style="margin-bottom:12px"><div style="font-weight:600;margin-bottom:6px">API 基础地址</div>
        <Input @bind-Value="apiBase" Placeholder="例如 http://localhost:5200 或 https://your.api" />
        <div style="color:#999;margin-top:6px">为空则使用内置默认地址（appsettings 的 Api:BaseUrl）。建议填写实际后端地址。</div>
    </div>
    <div style="margin-bottom:12px"><div style="font-weight:600;margin-bottom:6px">界面语言</div>
        <select @bind="lang" style="width:220px;height:28px"><option value="zh">中文</option><option value="ja">日本語</option><option value="en">English</option></select>
    </div>
    <Divider />
    <h3>管理员账户</h3>
    <div style="margin-bottom:12px"><div style="font-weight:600;margin-bottom:6px">管理员用户名</div>
        <Input @bind-Value="adminUser" />
    </div>
    <div style="margin-bottom:12px"><div style="font-weight:600;margin-bottom:6px">管理员邮箱</div>
        <Input @bind-Value="adminEmail" />
    </div>
    <div style="margin-bottom:12px"><div style="font-weight:600;margin-bottom:6px">管理员密码</div>
        <InputPassword @bind-Value="adminPassword" />
    </div>
    <div>
        <Space>
            <Button Type="ButtonType.Primary" OnClick="SaveAsync" Loading="saving">保存并进入登录</Button>
            <Button OnClick="GotoLogin">已有配置，去登录</Button>
        </Space>
    </div>
</div>

@code {
    private string? apiBase;
    private string lang = "ja";
    private bool saving;
    private string adminUser = "admin";
    private string adminEmail = "admin@local";
    private string adminPassword = "Admin@12345";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var storedBase = await JS.InvokeAsync<string?>("localStorage.getItem", "apiBase");
                if (!string.IsNullOrWhiteSpace(storedBase)) apiBase = storedBase;
                var storedLang = await JS.InvokeAsync<string?>("localStorage.getItem", "lang");
                if (!string.IsNullOrWhiteSpace(storedLang)) lang = storedLang!;
                StateHasChanged();
            }
            catch { }
        }
    }

    private async Task SaveAsync()
    {
        saving = true;
        try
        {
            if (!string.IsNullOrWhiteSpace(apiBase))
            {
                await JS.InvokeVoidAsync("localStorage.setItem", "apiBase", apiBase);
            }
            await JS.InvokeVoidAsync("localStorage.setItem", "lang", lang);
            // initialize admin (best-effort)
            try
            {
                var http = new HttpClient();
                if (!string.IsNullOrWhiteSpace(apiBase)) http.BaseAddress = new Uri(apiBase!);
                using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(3));
                    await http.PostAsJsonAsync("/api/setup/admin", new { username = adminUser, email = adminEmail, password = adminPassword }, cts.Token);
            }
            catch { }
            await JS.InvokeVoidAsync("localStorage.setItem", "configured", "true");
            Nav.NavigateTo("/login", forceLoad: true);
        }
        finally { saving = false; }
    }

    private void GotoLogin() => Nav.NavigateTo("/login", forceLoad: true);
}




