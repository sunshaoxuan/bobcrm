@page "/setup"
@layout BobCrm.App.Components.Layout.EmptyLayout

@inject IJSRuntime JS
@inject NavigationManager Nav
@inject BobCrm.App.Services.I18nService I18n
@inject BobCrm.App.Services.AuthService Auth

<h1>@I18n.T("LBL_SETUP")</h1>

<div>
    <div style="margin-bottom:12px"><div style="font-weight:600;margin-bottom:6px">@I18n.T("LBL_API_BASE")</div>
        <Input @bind-Value="apiBase" Placeholder='@I18n.T("PH_API_BASE_EXAMPLE")' />
        <div style="color:#999;margin-top:6px">@I18n.T("LBL_API_BASE_HINT")</div>
    </div>
    <div style="margin-bottom:12px"><div style="font-weight:600;margin-bottom:6px">@I18n.T("LBL_LANG")</div>
        <select value="@lang" @onchange="OnLangChanged" style="width:220px;height:28px">
            @if (langs.Count == 0)
            {
                <option value="zh">中文</option>
                <option value="ja">日本語</option>
                <option value="en">English</option>
            }
            else
            {
                @foreach (var l in langs)
                {
                    <option value="@l.code">@l.name</option>
                }
            }
        </select>
    </div>
    <Divider />
    <h3>@I18n.T("LBL_ADMIN_ACCOUNT")</h3>
    <div style="margin-bottom:12px"><div style="font-weight:600;margin-bottom:6px">@I18n.T("LBL_ADMIN_USERNAME")</div>
        <Input @bind-Value="adminUser" />
    </div>
    <div style="margin-bottom:12px"><div style="font-weight:600;margin-bottom:6px">@I18n.T("LBL_ADMIN_EMAIL")</div>
        <Input @bind-Value="adminEmail" />
    </div>
    <div style="margin-bottom:12px"><div style="font-weight:600;margin-bottom:6px">@I18n.T("LBL_ADMIN")@I18n.T("LBL_PASSWORD")</div>
        <InputPassword @bind-Value="adminPassword" />
    </div>
    <div>
        <Space>
            <Button Type="ButtonType.Primary" OnClick="SaveAsync" Loading="saving">@I18n.T("BTN_SAVE_AND_GO_LOGIN")</Button>
            <Button OnClick="GotoLogin">@I18n.T("BTN_GO_LOGIN")</Button>
        </Space>
    </div>
</div>

@code {
    private string? apiBase;
    private string lang = "ja";
    private List<LangItem> langs = new();
    private bool saving;
    private string adminUser = "admin";
    private string adminEmail = "admin@local";
    private string adminPassword = "Admin@12345";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var savedLang = await JS.InvokeAsync<string?>("localStorage.getItem", "lang");
                var langToLoad = !string.IsNullOrWhiteSpace(savedLang) ? savedLang! : lang;
                await I18n.LoadAsync(langToLoad);
                try { await JS.InvokeVoidAsync("bobcrm.setLang", langToLoad); } catch { }
                var storedBase = await JS.InvokeAsync<string?>("localStorage.getItem", "apiBase");
                if (!string.IsNullOrWhiteSpace(storedBase)) apiBase = storedBase;
                var storedLang = await JS.InvokeAsync<string?>("localStorage.getItem", "lang");
                if (!string.IsNullOrWhiteSpace(storedLang)) lang = storedLang!;
                // load languages list from API (works without auth)
                try
                {
                    var http = await Auth.CreateClientWithLangAsync();
                    var resp = await http.GetAsync("/api/i18n/languages");
                    if (resp.IsSuccessStatusCode)
                    {
                        var json = await resp.Content.ReadFromJsonAsync<List<LangItem>>();
                        if (json is not null && json.Count > 0) langs = json;
                    }
                }
                catch { }
                StateHasChanged();
            }
            catch { }
        }
    }

    private async Task SaveAsync()
    {
        saving = true;
        try
        {
            if (!string.IsNullOrWhiteSpace(apiBase))
            {
                await JS.InvokeVoidAsync("localStorage.setItem", "apiBase", apiBase);
            }
            await JS.InvokeVoidAsync("localStorage.setItem", "lang", lang);
            // initialize admin (best-effort)
            try
            {
                var http = await Auth.CreateClientWithLangAsync();
                if (!string.IsNullOrWhiteSpace(apiBase)) http.BaseAddress = new Uri(apiBase!);
                using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(3));
                await http.PostAsJsonAsync("/api/setup/admin", new { username = adminUser, email = adminEmail, password = adminPassword }, cts.Token);
            }
            catch { }
            await JS.InvokeVoidAsync("localStorage.setItem", "configured", "true");
            Nav.NavigateTo("/login", forceLoad: true);
        }
        finally { saving = false; }
    }

    private void GotoLogin() => Nav.NavigateTo("/login", forceLoad: true);

    public class LangItem { public string code { get; set; } = string.Empty; public string name { get; set; } = string.Empty; }

    private async Task OnLangChanged(ChangeEventArgs e)
    {
        var value = e?.Value?.ToString() ?? "ja";
        lang = value;
        try { await JS.InvokeVoidAsync("localStorage.setItem", "lang", lang); } catch { }

        // If the API base is typed but not saved yet, try to fetch dictionary directly
        try
        {
            if (!string.IsNullOrWhiteSpace(apiBase))
            {
                using var http = new HttpClient { BaseAddress = new Uri(apiBase!, UriKind.Absolute) };
                using var resp = await http.GetAsync($"/api/i18n/{lang}");
                if (resp.IsSuccessStatusCode)
                {
                    var json = await resp.Content.ReadAsStringAsync();
                    await JS.InvokeVoidAsync("localStorage.setItem", $"i18n:{lang}:v1", json);
                }
            }
        }
        catch { }

        await I18n.LoadAsync(lang);
        try { await JS.InvokeVoidAsync("bobcrm.setLang", lang); } catch { }
        StateHasChanged();
    }
}











