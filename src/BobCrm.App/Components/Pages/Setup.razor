@page "/setup"
@layout BobCrm.App.Components.Layout.EmptyLayout
@rendermode RenderMode.InteractiveServer

@inject IJSRuntime JS
@inject NavigationManager Nav
@inject BobCrm.App.Services.I18nService I18n
@inject BobCrm.App.Services.AuthService Auth
@inject MessageService Message
@inject IConfiguration Configuration
@inject IConfiguration Configuration

<h1>@I18n.T("LBL_SETUP")</h1>


<div>

    <div style="margin-bottom:12px">
        <div style="font-weight:600;margin-bottom:6px">
            @I18n.T("LBL_API_BASE") <span style="color:#999;font-weight:normal;font-size:12px">(可选，默认: @(defaultApiBase ?? "http://localhost:5200"))</span>
        </div>
        <Input @bind-Value="apiBase" Placeholder="@placeholderText" />
        <div style="color:#999;margin-top:6px">
            @I18n.T("LBL_API_BASE_HINT") 如果不填写，将使用配置的默认地址。
        </div>
    </div>

    <div style="margin-bottom:12px"><div style="font-weight:600;margin-bottom:6px">@I18n.T("LBL_LANG")</div>
        <select value="@lang" @onchange="OnLangChanged" style="width:220px;height:28px">
            @if (langs.Count == 0)
            {
                <option value="zh">中文</option>
                <option value="ja">日本語</option>
                <option value="en">English</option>
            }
            else
            {
                @foreach (var l in langs)
                {
                    <option value="@l.code">@l.name</option>
                }
            }
        </select>
    </div>
    <Divider />

    <h3>@I18n.T("LBL_ADMIN_ACCOUNT")</h3>

    <div style="margin-bottom:12px"><div style="font-weight:600;margin-bottom:6px">@I18n.T("LBL_ADMIN_USERNAME")</div>

        <Input @bind-Value="adminUser" Placeholder="admin" />

    </div>

    <div style="margin-bottom:12px"><div style="font-weight:600;margin-bottom:6px">@I18n.T("LBL_ADMIN_EMAIL")</div>

        <Input @bind-Value="adminEmail" Placeholder="admin@local" />

    </div>

    <div style="margin-bottom:12px"><div style="font-weight:600;margin-bottom:6px">@I18n.T("LBL_ADMIN")@I18n.T("LBL_PASSWORD")</div>
        <InputPassword @bind-Value="adminPassword" />
    </div>
    <div>

        <Space>
            <Button Type="ButtonType.Primary" OnClick="SaveAsync" Loading="saving">@I18n.T("BTN_SAVE_AND_GO_LOGIN")</Button>
            <Button OnClick="GotoLogin">@I18n.T("BTN_GO_LOGIN")</Button>
            <Button Type="ButtonType.Default" Danger="true" OnClick="ResetSetup" Loading="resetting">重置初始化设置</Button>
        </Space>
    </div>

</div>



@code {

    private string? apiBase;
    private string? defaultApiBase;
    private string placeholderText = "";

    private string lang = "ja";
    private List<LangItem> langs = new();
    private bool saving;

    // 初始为空：避免刷新时先看到硬编码的默认值，等待 API 返回后回填
    private string adminUser = string.Empty;

    private string adminEmail = string.Empty;

    private string adminPassword = ""; // 密码字段不初始化，保持为空
    private bool resetting = false;
    
    protected override void OnInitialized()
    {
        // 优先从当前页面的host推断API地址（支持分布式部署）
        var currentUri = new Uri(Nav.BaseUri);
        var apiPort = 5200; // 统一默认使用 5200，避免回退到 8081
        
        // 使用当前访问的host和scheme，而不是localhost
        var inferredBase = $"{currentUri.Scheme}://{currentUri.Host}:{apiPort}";
        
        // 如果配置文件中有配置且包含localhost，则替换为当前host
        var configBase = Configuration["Api:BaseUrl"];
        if (!string.IsNullOrWhiteSpace(configBase) && configBase.Contains("localhost"))
        {
            // 配置文件是localhost，需要替换为当前host
            var configUri = new Uri(configBase);
            defaultApiBase = $"{currentUri.Scheme}://{currentUri.Host}:{configUri.Port}";
        }
        else if (!string.IsNullOrWhiteSpace(configBase))
        {
            // 配置文件不是localhost，直接使用配置
            defaultApiBase = configBase;
        }
        else
        {
            // 没有配置，使用推断的地址
            defaultApiBase = inferredBase;
        }
        
        apiBase = defaultApiBase; // 初始化为默认值
        placeholderText = $"默认: {defaultApiBase}";
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // 先确定有效 API Base（localStorage -> cookie -> 已输入值/默认推断）
                var lsBase = await JS.InvokeAsync<string?>("localStorage.getItem", "apiBase");
                var cookieBase = await JS.InvokeAsync<string?>("bobcrm.getCookie", "apiBase");
                if (!string.IsNullOrWhiteSpace(lsBase))
                {
                    apiBase = lsBase;
                }
                else if (!string.IsNullOrWhiteSpace(cookieBase))
                {
                    apiBase = cookieBase;
                }
                else
                {
                    var currentUri = new Uri(Nav.BaseUri);
                    var apiPort = 5200; // 统一默认使用 5200
                    apiBase ??= $"{currentUri.Scheme}://{currentUri.Host}:{apiPort}";
                }
                defaultApiBase = apiBase;
                placeholderText = $"默认: {defaultApiBase}";
                // 写入 cookie，供 I18nService/命名客户端使用
                try { await JS.InvokeVoidAsync("bobcrm.setCookie", "apiBase", apiBase, 365); } catch { }
                try { await JS.InvokeVoidAsync("localStorage.setItem", "apiBase", apiBase); } catch { }

                // 再加载语言（cookie 或默认）
                var savedLang = await JS.InvokeAsync<string?>("bobcrm.getCookie", "lang");
                var langToLoad = !string.IsNullOrWhiteSpace(savedLang) ? savedLang! : lang;
                await I18n.LoadAsync(langToLoad);
                try { await JS.InvokeVoidAsync("bobcrm.setLang", langToLoad); } catch { }
                
                // 从数据库读取当前管理员信息（如果已配置）
                try
                {
                    // 计算有效 API 基础地址：优先当前输入/状态，其次 cookie，再次默认/来源
                    var cb = await JS.InvokeAsync<string?>("bobcrm.getCookie", "apiBase");
                    var effectiveBase = apiBase ?? (!string.IsNullOrWhiteSpace(cb) ? cb! : null) ?? defaultApiBase ?? await JS.InvokeAsync<string>("bobcrm.getOrigin");

                    async Task<bool> TryFetchAdminAsync(string baseUrl)
                    {
                        try
                        {
                            await JS.InvokeVoidAsync("console.log", $"[Setup] Fetching admin info from (browser): {baseUrl}");
                            var url = (baseUrl ?? string.Empty).TrimEnd('/') + "/api/setup/admin";
                            var adminInfo = await JS.InvokeAsync<AdminInfo?>("bobcrm.fetchJson", url);
                            if (adminInfo is null) return false;
                            var u = adminInfo.username;
                            var m = adminInfo.email;
                            if (!string.IsNullOrWhiteSpace(u))
                            {
                                adminUser = u!;
                                if (!string.IsNullOrWhiteSpace(m)) adminEmail = m!;
                                apiBase = baseUrl; defaultApiBase = baseUrl;
                                try { await JS.InvokeVoidAsync("bobcrm.setCookie", "apiBase", baseUrl, 365); } catch { }
                                await JS.InvokeVoidAsync("console.log", $"[Setup] Loaded admin from database: username='{adminUser}', email='{adminEmail}'");
                                StateHasChanged();
                                return true;
                            }
                            return false;
                        }
                        catch { return false; }
                    }

                    // 只尝试一次，不自动回退到其他端口
                    await TryFetchAdminAsync(effectiveBase);
                }
                catch (Exception ex)
                {
                    System.Diagnostics.Debug.WriteLine($"[Setup] Failed to load admin info from API: {ex.Message}");
                    await JS.InvokeVoidAsync("console.log", $"[Setup] Could not load admin from API (API may not be running): {ex.Message}");
                }
                
                // load languages list from API (works without auth) using effective base
                try
                {
                    var cookieBase2 = await JS.InvokeAsync<string?>("bobcrm.getCookie", "apiBase");
                    var base2 = apiBase ?? (!string.IsNullOrWhiteSpace(cookieBase2) ? cookieBase2! : null) ?? defaultApiBase ?? await JS.InvokeAsync<string>("bobcrm.getOrigin");
                    await JS.InvokeVoidAsync("console.log", $"[Setup] Loading languages from: {base2}");
                    async Task<bool> TryFetchAsync(string b)
                    {
                        try
                        {
                            using var tmp = new HttpClient { BaseAddress = new Uri((b ?? string.Empty).TrimEnd('/') + "/", UriKind.Absolute) };
                            try { tmp.DefaultRequestHeaders.Remove("X-Lang"); tmp.DefaultRequestHeaders.Add("X-Lang", (lang ?? "ja").ToLowerInvariant()); } catch { }
                            using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(2));
                            var r = await tmp.GetAsync("/api/i18n/languages", cts.Token);
                            if (!r.IsSuccessStatusCode) return false;
                            var json = await r.Content.ReadFromJsonAsync<List<LangItem>>();
                            if (json is null || json.Count == 0) return false;
                            langs = json; apiBase = b; defaultApiBase = b;
                            try { await JS.InvokeVoidAsync("bobcrm.setCookie", "apiBase", b, 365); } catch { }
                            return true;
                        }
                        catch { return false; }
                    }

                    // 只尝试一次，不自动回退到其他端口
                    await TryFetchAsync(base2);
                }
                catch { }
                StateHasChanged();
            }
            catch { }
        }
    }


    private async Task SaveAsync()
    {
        try
        {
            // Debug: Log method entry - multiple ways to ensure we see it
            await JS.InvokeVoidAsync("console.log", "[Setup] SaveAsync method called!", apiBase, adminUser, adminEmail);
            System.Diagnostics.Debug.WriteLine($"[Setup] SaveAsync called. apiBase={apiBase}, adminUser={adminUser}, adminEmail={adminEmail}");
            
            saving = true;
            StateHasChanged();
            await Task.Yield(); // Ensure UI updates
            
            
            // Validate input - 如果用户没有填写，使用默认值
            if (string.IsNullOrWhiteSpace(apiBase))
            {
                apiBase = defaultApiBase ?? "http://localhost:5200";
            }
            
            // 确保API地址有效
            if (!Uri.TryCreate(apiBase, UriKind.Absolute, out var uri) || (uri.Scheme != "http" && uri.Scheme != "https"))
            {
                var errorMsg = $"API Base地址格式不正确：{apiBase}。请输入有效的URL（如：http://localhost:5200）";
                System.Diagnostics.Debug.WriteLine($"[Setup] Validation failed: {errorMsg}");
                await Message.Error(errorMsg);
                StateHasChanged();
                return;
            }
            if (string.IsNullOrWhiteSpace(adminUser))
            {
                var errorMsg = "管理员用户名不能为空";
                System.Diagnostics.Debug.WriteLine($"[Setup] Validation failed: {errorMsg}");
                await Message.Error(errorMsg);
                StateHasChanged();
                return;
            }
            if (string.IsNullOrWhiteSpace(adminEmail))
            {
                var errorMsg = "管理员邮箱不能为空";
                System.Diagnostics.Debug.WriteLine($"[Setup] Validation failed: {errorMsg}");
                await Message.Error(errorMsg);
                StateHasChanged();
                return;
            }
            if (string.IsNullOrWhiteSpace(adminPassword))
            {
                var errorMsg = "管理员密码不能为空";
                System.Diagnostics.Debug.WriteLine($"[Setup] Validation failed: {errorMsg}");
                await Message.Error(errorMsg);
                StateHasChanged();
                return;
            }
            
            System.Diagnostics.Debug.WriteLine("[Setup] Validation passed, starting save process...");

            // persist base and lang locally first（即使后端保存失败也要持久化 API_BASE）
            try { if (!string.IsNullOrWhiteSpace(apiBase)) await JS.InvokeVoidAsync("localStorage.setItem", "apiBase", apiBase); } catch { }
            try { if (!string.IsNullOrWhiteSpace(apiBase)) await JS.InvokeVoidAsync("bobcrm.setCookie", "apiBase", apiBase, 365); } catch { }
            try { await JS.InvokeVoidAsync("localStorage.setItem", "lang", lang); } catch { }

            // reload i18n immediately so UI switches language before navigation
            try { await I18n.LoadAsync(lang); await JS.InvokeVoidAsync("bobcrm.setLang", lang); } catch { }

            // call backend to save admin; await to ensure it's actually saved
            bool ok = false; string? err = null;
            try
            {
                using (var http = new HttpClient { BaseAddress = new Uri((apiBase ?? defaultApiBase ?? await JS.InvokeAsync<string>("bobcrm.getOrigin")).TrimEnd('/') + "/", UriKind.Absolute) })
                {
                    // Set language header
                    var langHeader = lang.ToLowerInvariant();
                    if (http.DefaultRequestHeaders.Contains("X-Lang"))
                        http.DefaultRequestHeaders.Remove("X-Lang");
                    http.DefaultRequestHeaders.Add("X-Lang", langHeader);
                    
                    using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(15));
                    var requestUrl = http.BaseAddress + "api/setup/admin";
                    System.Diagnostics.Debug.WriteLine($"[Setup] Sending POST request to: {requestUrl}");
                    await JS.InvokeVoidAsync("console.log", $"[Setup] Sending POST request to: {requestUrl}, username: {adminUser}, email: {adminEmail}");
                    
                    var resp = await http.PostAsJsonAsync("/api/setup/admin", new { username = adminUser, email = adminEmail, password = adminPassword }, cts.Token);
                    ok = resp.IsSuccessStatusCode;
                    System.Diagnostics.Debug.WriteLine($"[Setup] Response status: {(int)resp.StatusCode} {resp.StatusCode}, Success: {ok}");
                    await JS.InvokeVoidAsync("console.log", $"[Setup] Response: {(int)resp.StatusCode} {resp.StatusCode}, Success: {ok}");
                    
                    if (!ok)
                    {
                        var errorContent = await resp.Content.ReadAsStringAsync();
                        err = $"HTTP {(int)resp.StatusCode} {resp.StatusCode}: {errorContent}";
                        System.Diagnostics.Debug.WriteLine($"[Setup] Error response: {err}");
                        await JS.InvokeVoidAsync("console.error", $"[Setup] Error: {err}");
                    }
                    else
                    {
                        var successContent = await resp.Content.ReadAsStringAsync();
                        System.Diagnostics.Debug.WriteLine($"[Setup] Success response: {successContent}");
                        await JS.InvokeVoidAsync("console.log", $"[Setup] Success: {successContent}");
                        // 确认管理员账户已保存
                        ok = true; // 明确设置为true
                    }
                }
            }
            catch (TaskCanceledException)
            {
                err = $"请求超时（超过15秒）。请检查API服务器 {apiBase} 是否正在运行。\n\n请确认：\n1. API服务器已启动\n2. 在浏览器中访问 {apiBase}/swagger 确认API可访问";
                ok = false;
            }
            catch (HttpRequestException httpEx)
            {
                err = $"无法连接到API服务器 {apiBase}：{httpEx.Message}\n\n请确认：\n1. API服务器已启动（运行 BobCrm.Api 项目）\n2. API地址正确：{apiBase}\n3. 网络连接正常\n4. 防火墙允许访问该端口";
                ok = false;
            }
            catch (Exception ex)
            {
                err = $"发生错误：{ex.GetType().Name} - {ex.Message}\n\n堆栈跟踪：{ex.StackTrace}";
                System.Diagnostics.Debug.WriteLine($"[Setup] Exception details: {ex}");
                ok = false;
            }

            if (!ok)
            {
                var errorMsg = "保存失败";
                if (!string.IsNullOrWhiteSpace(err))
                {
                    errorMsg += ": " + err;
                }
                System.Diagnostics.Debug.WriteLine($"[Setup] Save failed: {errorMsg}");
                
                // Show detailed error message with admin account info
                var fullErrorMsg = $"无法保存管理员账户到 {apiBase}\n\n" +
                    $"尝试保存的用户信息：\n" +
                    $"  用户名: {adminUser}\n" +
                    $"  邮箱: {adminEmail}\n\n" +
                    $"错误详情：{errorMsg}\n\n" +
                    $"请检查：\n" +
                    $"1. API服务器是否正在运行 ({apiBase})\n" +
                    $"2. 在浏览器中访问 {apiBase}/swagger 确认API是否可访问\n" +
                    $"3. 网络连接是否正常\n" +
                    $"4. API地址是否正确";
                
                try
                {
                    await Message.Error(fullErrorMsg);
                }
                catch (Exception msgEx)
                {
                    System.Diagnostics.Debug.WriteLine($"[Setup] Message.Error failed: {msgEx.Message}");
                    // Fallback: try to show alert
                    try { await JS.InvokeVoidAsync("alert", fullErrorMsg); } catch { }
                    try { await JS.InvokeVoidAsync("console.error", errorMsg); } catch { }
                }
                StateHasChanged();
                return;
            }

            System.Diagnostics.Debug.WriteLine("[Setup] Save successful, navigating to home...");
            
            // 管理员信息已保存到数据库（PostgreSQL），无需额外的持久化操作
            
            // mark configured and navigate to home
            try { await JS.InvokeVoidAsync("bobcrm.setCookie", "apiBase", (apiBase ?? defaultApiBase ?? await JS.InvokeAsync<string>("bobcrm.getOrigin")), 365); } catch { }
            try { await JS.InvokeVoidAsync("localStorage.setItem", "configured", "true"); } catch { }
            try
            {
                await Message.Success("设置已保存，正在跳转到首页...");
            }
            catch (Exception msgEx)
            {
                System.Diagnostics.Debug.WriteLine($"[Setup] Message.Success failed: {msgEx.Message}");
            }
            await Task.Delay(500); // Give time for message to show
            Nav.NavigateTo("/", forceLoad: true);
        }
        catch (Exception ex)
        {
            // Catch all unhandled exceptions
            System.Diagnostics.Debug.WriteLine($"[Setup] Unhandled exception in SaveAsync: {ex}");
            var errorMsg = $"发生错误: {ex.Message}";
            try
            {
                await Message.Error(errorMsg);
            }
            catch
            {
                try { await JS.InvokeVoidAsync("console.error", errorMsg); } catch { }
                try { await JS.InvokeVoidAsync("alert", errorMsg); } catch { }
            }
        }
        finally
        {
            saving = false;
            StateHasChanged();
        }
    }


    private void GotoLogin() => Nav.NavigateTo("/login", forceLoad: true);

    private async Task ResetSetup()
    {
        resetting = true;
        StateHasChanged();
        
        try
        {
            var confirm = await JS.InvokeAsync<bool>("confirm", "确定要重置初始化设置吗？这将删除当前管理员账户，您需要重新设置。");
            if (!confirm)
            {
                resetting = false;
                StateHasChanged();
                return;
            }
            
            using var http = new HttpClient { BaseAddress = new Uri((apiBase ?? defaultApiBase ?? "http://localhost:5200").TrimEnd('/') + "/", UriKind.Absolute) };
            http.Timeout = TimeSpan.FromSeconds(10);
            
            var resp = await http.PostAsync("/api/debug/reset-setup", null);
            if (resp.IsSuccessStatusCode)
            {
                var result = await resp.Content.ReadFromJsonAsync<Dictionary<string, object>>();
                var message = result?.GetValueOrDefault("message")?.ToString() ?? "设置已重置";
                await Message.Success(message);
                
                // 清空表单
                adminUser = string.Empty;
                adminEmail = string.Empty;
                adminPassword = string.Empty;
                StateHasChanged();
            }
            else
            {
                var error = await resp.Content.ReadAsStringAsync();
                await Message.Error($"重置失败: {error}");
            }
        }
        catch (Exception ex)
        {
            await Message.Error($"重置失败: {ex.Message}");
        }
        finally
        {
            resetting = false;
            StateHasChanged();
        }
    }

    public class LangItem { public string code { get; set; } = string.Empty; public string name { get; set; } = string.Empty; }
    
    public class AdminInfo 
    { 
        public string username { get; set; } = string.Empty; 
        public string email { get; set; } = string.Empty; 
        public bool exists { get; set; } 
    }

    private async Task OnLangChanged(ChangeEventArgs e)
    {
        var value = e?.Value?.ToString() ?? "ja";
        lang = value;
        try { await JS.InvokeVoidAsync("localStorage.setItem", "lang", lang); } catch { }

        // If the API base is typed but not saved yet, try to fetch dictionary directly
        try
        {
            if (!string.IsNullOrWhiteSpace(apiBase))
            {
                using var http = new HttpClient { BaseAddress = new Uri(apiBase!, UriKind.Absolute) };
                using var resp = await http.GetAsync($"/api/i18n/{lang}");
                if (resp.IsSuccessStatusCode)
                {
                    var json = await resp.Content.ReadAsStringAsync();
                    await JS.InvokeVoidAsync("localStorage.setItem", $"i18n:{lang}:v1", json);
                }
            }
        }
        catch { }

        await I18n.LoadAsync(lang);
        try { await JS.InvokeVoidAsync("bobcrm.setLang", lang); } catch { }
        StateHasChanged();
    }
}




