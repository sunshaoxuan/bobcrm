@page "/login"
@layout BobCrm.App.Components.Layout.EmptyLayout
@inject IHttpClientFactory HttpFactory
@inject IJSRuntime JS
@inject NavigationManager Nav

<h1>登录</h1>

<EditForm Model="model" OnValidSubmit="OnLoginAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <Form Layout="FormLayout.Vertical">
        <FormItem Label="用户名或邮箱">
            <Input @bind-Value="model.username" />
        </FormItem>
        <FormItem Label="密码">
            <InputPassword @bind-Value="model.password" />
        </FormItem>
        <FormItem>
            <Button Type="ButtonType.Primary" HtmlType="ButtonHtmlType.Submit" Loading="loading">登录</Button>
        </FormItem>
    </Form>
</EditForm>

@if (!string.IsNullOrEmpty(error))
{
    <Alert Message="@error" Type="AlertType.Error" ShowIcon="true" />
}

@code {
    private LoginModel model = new();
    private bool loading = false;
    private string? error;

    protected override async Task OnInitializedAsync()
    {
        var token = await JS.InvokeAsync<string?>("localStorage.getItem", "accessToken");
        if (!string.IsNullOrWhiteSpace(token))
        {
            Nav.NavigateTo("/customers", forceLoad: true);
        }
    }

    private async Task OnLoginAsync()
    {
        loading = true; error = null;
        try
        {
            var http = HttpFactory.CreateClient("api");
            var resp = await http.PostAsJsonAsync("/api/auth/login", model);
            if (!resp.IsSuccessStatusCode)
            {
                error = $"登录失败: {(int)resp.StatusCode}";
                return;
            }
            var json = await resp.Content.ReadFromJsonAsync<LoginResult>();
            if (json is null)
            {
                error = "无法解析服务器响应"; return;
            }
            await JS.InvokeVoidAsync("localStorage.setItem", "accessToken", json.accessToken);
            await JS.InvokeVoidAsync("localStorage.setItem", "refreshToken", json.refreshToken);
            var userStr = System.Text.Json.JsonSerializer.Serialize(json.user);
            await JS.InvokeVoidAsync("localStorage.setItem", "user", userStr);
            Nav.NavigateTo("/customers", forceLoad: true);
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally
        {
            loading = false;
        }
    }

    public class LoginModel
    {
        public string username { get; set; } = string.Empty;
        public string password { get; set; } = string.Empty;
    }
    public record LoginResult(string accessToken, string refreshToken, UserDto user);
    public record UserDto(string id, string username, string role);
}
