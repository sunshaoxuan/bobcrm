@page "/login"
@layout BobCrm.App.Components.Layout.EmptyLayout

@inject IHttpClientFactory HttpFactory
@inject IJSRuntime JS
@inject NavigationManager Nav
@inject BobCrm.App.Services.I18nService I18n

<h1>@I18n.T("LBL_LOGIN_TITLE")</h1>

<EditForm Model="model" OnValidSubmit="OnLoginAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div>
        <div>
            <Input @bind-Value="model.username" />
        </div>
        <div>
            <InputPassword @bind-Value="model.password" />
        </div>
        <div>
            <Button Type="ButtonType.Primary" HtmlType="ButtonHtmlType.Submit" Loading="loading">@I18n.T("LBL_LOGIN_TITLE")</Button>
        </div>
    </div>
    
</EditForm>

@if (!string.IsNullOrEmpty(error))
{
    <Alert Message="@error" Type="AlertType.Error" ShowIcon="true" />
}

@code {
    private LoginModel model = new();
    private bool loading = false;
    private string? error;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var savedLang = await JS.InvokeAsync<string?>("localStorage.getItem", "lang");
                if (!string.IsNullOrWhiteSpace(savedLang)) { await I18n.LoadAsync(savedLang!); try { await JS.InvokeVoidAsync("bobcrm.setLang", savedLang); } catch { } }
                var configured = await JS.InvokeAsync<string?>("localStorage.getItem", "configured");
                if (string.IsNullOrWhiteSpace(configured)) { Nav.NavigateTo("/setup"); return; }
                var token = await JS.InvokeAsync<string?>("localStorage.getItem", "accessToken");
                if (!string.IsNullOrWhiteSpace(token))
                {
                    Nav.NavigateTo("/customers", forceLoad: true);
                    return;
                }
            }
            catch { }
        }
    }

    private async Task OnLoginAsync()
    {
        loading = true; error = null;
        try
        {
            var http = HttpFactory.CreateClient("api");
            // allow local override
            try { var baseUrl = await JS.InvokeAsync<string?>("localStorage.getItem", "apiBase"); if (!string.IsNullOrWhiteSpace(baseUrl)) http.BaseAddress = new Uri(baseUrl!); } catch { }
            // attach X-Lang header
            try { var lang = await JS.InvokeAsync<string?>("localStorage.getItem", "lang"); if (!string.IsNullOrWhiteSpace(lang)) { if (http.DefaultRequestHeaders.Contains("X-Lang")) http.DefaultRequestHeaders.Remove("X-Lang"); http.DefaultRequestHeaders.Add("X-Lang", lang!.ToLowerInvariant()); } } catch { }
            var resp = await http.PostAsJsonAsync("/api/auth/login", model);
            if (!resp.IsSuccessStatusCode)
            {
                error = I18n.T("ERR_LOGIN_FAILED");
                return;
            }
            var json = await resp.Content.ReadFromJsonAsync<LoginResult>();
            if (json is null)
            {
                error = I18n.T("ERR_PARSE_RESPONSE"); return;
            }
            await JS.InvokeVoidAsync("localStorage.setItem", "accessToken", json.accessToken);
            await JS.InvokeVoidAsync("localStorage.setItem", "refreshToken", json.refreshToken);
            var userStr = System.Text.Json.JsonSerializer.Serialize(json.user);
            await JS.InvokeVoidAsync("localStorage.setItem", "user", userStr);
            Nav.NavigateTo("/customers", forceLoad: true);
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally
        {
            loading = false;
        }
    }

    public class LoginModel
    {
        public string username { get; set; } = string.Empty;
        public string password { get; set; } = string.Empty;
    }
    public record LoginResult(string accessToken, string refreshToken, UserDto user);
    public record UserDto(string id, string username, string role);
}









