@page "/customers"
@rendermode RenderMode.InteractiveServer

@inject BobCrm.App.Services.AuthService Auth
@inject NavigationManager Nav
@inject IJSRuntime JS
@inject BobCrm.App.Services.I18nService I18n

<h1>顧客</h1>

<Input Placeholder="検索 名称/コード" @bind-Value="keyword" Style="max-width:260px;margin-bottom:12px" />

<table class="ant-table" style="width:100%">
  <thead><tr><th>コード</th><th>名称</th><th>操作</th></tr></thead>
  <tbody>
    @foreach (var c in filtered)
    {
        <tr><td>@c.code</td><td>@c.name</td><td><Button Type="ButtonType.Link" OnClick="() => OpenDetail(c.id)">詳細</Button></td></tr>
    }
  </tbody>
</table>
@if (error is not null)
{
    <Alert Message="@error" Type="AlertType.Error" ShowIcon="true" />
}

@code {
    private List<CustomerItem> data = new();
    private string keyword = string.Empty;
    private string? error;

    private IEnumerable<CustomerItem> filtered => string.IsNullOrWhiteSpace(keyword)
        ? data : data.Where(x => (x.name ?? "").Contains(keyword, StringComparison.OrdinalIgnoreCase) || (x.code ?? "").Contains(keyword, StringComparison.OrdinalIgnoreCase));

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // simple auth guard
                var token = await JS.InvokeAsync<string?>("localStorage.getItem", "accessToken");
                if (string.IsNullOrWhiteSpace(token)) { Nav.NavigateTo("/login"); return; }

                var resp = await Auth.GetWithRefreshAsync("/api/customers");
                if (!resp.IsSuccessStatusCode)
                {
                    error = $"読み込み失敗: {(int)resp.StatusCode}"; StateHasChanged(); return;
                }
                var json = await resp.Content.ReadFromJsonAsync<List<CustomerItem>>();
                data = json ?? new();
                StateHasChanged();
            }
            catch { }
        }
    }

    private void OpenDetail(int id) => Nav.NavigateTo($"/customers/{id}");

    public class CustomerItem
    {
        public int id { get; set; }
        public string? code { get; set; }
        public string? name { get; set; }
    }
}

















