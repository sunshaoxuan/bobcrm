@page "/customers"

<h1>客户列表</h1>

<Button Type="primary" OnClick="LoadAsync">刷新</Button>

<table class="ant-table">
    <thead>
        <tr>
            <th>编码</th>
            <th>名称</th>
            <th>操作</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var row in _rows)
        {
            <tr>
                <td>@row.code</td>
                <td>@row.name</td>
                <td><a href="/customers/@row.id">详情</a></td>
            </tr>
        }
    </tbody>
</table>

@code {
    private bool _loading = true;
    private List<CustomerRow> _rows = new();

    [Inject] public BobCrm.App.Services.AuthService Auth { get; set; } = default!;
    [Inject] public MessageService Message { get; set; } = default!;
    [Inject] public IJSRuntime JS { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        // nothing; LoadAsync will fetch token and call API
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        _loading = true;
        try
        {
            var resp = await Auth.GetWithRefreshAsync("/api/customers");
            if (resp.IsSuccessStatusCode)
            {
                _rows = (await resp.Content.ReadFromJsonAsync<List<CustomerRow>>()) ?? new();
            }
            else
            {
                // fallback mock
                _rows = new() {
                    new CustomerRow(1, "C001", "客户A"),
                    new CustomerRow(2, "C002", "客户B")
                };
            }
        }
        catch (Exception ex)
        {
            // fallback mock on error to keep UI usable
            _rows = new() {
                new CustomerRow(1, "C001", "客户A"),
                new CustomerRow(2, "C002", "客户B")
            };
            await Message.Warning($"使用临时数据: {ex.Message}");
        }
        finally
        {
            _loading = false;
        }
    }

    public record CustomerRow(int id, string code, string name);
}
